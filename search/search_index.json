{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"signalrgb-python","text":"<p>Welcome to the documentation for signalrgb-python. This library provides a powerful and easy-to-use interface for controlling SignalRGB Pro through both a command-line interface (CLI) and a Python library.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>\ud83d\udccb List available lighting effects</li> <li>\ud83d\udd0d Get detailed information about specific effects</li> <li>\ud83c\udfa8 Apply effects to your devices with ease</li> <li>\ud83d\udda5\ufe0f User-friendly command-line interface</li> <li>\ud83d\udc0d Python client library for seamless integration into your projects</li> <li>\ud83d\udd10 Error handling and connection management</li> <li>\ud83d\udd04 Automatic effect caching for improved performance</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Install signalrgb-python:</p> <pre><code>pip install signalrgb\n</code></pre> <p>Use the CLI to list available effects:</p> <pre><code>signalrgb list-effects\n</code></pre> <p>Or use the Python library in your code:</p> <pre><code>from signalrgb.client import SignalRGBClient\n\nclient = SignalRGBClient()\neffects = client.get_effects()\nfor effect in effects:\n    print(f\"Effect: {effect.attributes.name}\")\n</code></pre> <p>For more detailed information, check out the Installation and Usage guides.</p>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#what-should-i-know-before-i-get-started","title":"What should I know before I get started?","text":""},{"location":"contributing/#project-structure","title":"Project Structure","text":"<ul> <li><code>signalrgb/</code> - This directory contains the main source code for the project.</li> <li><code>tests/</code> - This directory contains all the tests.</li> <li><code>docs/</code> - This directory contains the project documentation.</li> <li><code>examples/</code> - This directory contains example scripts demonstrating how to use the library.</li> </ul>"},{"location":"contributing/#how-can-i-contribute","title":"How Can I Contribute?","text":""},{"location":"contributing/#reporting-bugs","title":"Reporting Bugs","text":"<p>This section guides you through submitting a bug report for signalrgb-python. Following these guidelines helps maintainers and the community understand your report, reproduce the behavior, and find related reports.</p> <ul> <li>Use a clear and descriptive title for the issue to identify the problem.</li> <li>Describe the exact steps which reproduce the problem in as many details as possible.</li> <li>Provide specific examples to demonstrate the steps.</li> <li>Describe the behavior you observed after following the steps and point out what exactly is the problem with that behavior.</li> <li>Explain which behavior you expected to see instead and why.</li> <li>Include screenshots and animated GIFs which show you following the described steps and clearly demonstrate the problem.</li> </ul>"},{"location":"contributing/#suggesting-enhancements","title":"Suggesting Enhancements","text":"<p>This section guides you through submitting an enhancement suggestion for signalrgb-python, including completely new features and minor improvements to existing functionality.</p> <ul> <li>Use a clear and descriptive title for the issue to identify the suggestion.</li> <li>Provide a step-by-step description of the suggested enhancement in as many details as possible.</li> <li>Provide specific examples to demonstrate the steps.</li> <li>Describe the current behavior and explain which behavior you expected to see instead and why.</li> <li>Explain why this enhancement would be useful to most signalrgb-python users.</li> <li>List some other text editors or applications where this enhancement exists.</li> </ul>"},{"location":"contributing/#your-first-code-contribution","title":"Your First Code Contribution","text":"<p>Unsure where to begin contributing to signalrgb-python? You can start by looking through these <code>beginner</code> and <code>help-wanted</code> issues:</p> <ul> <li>Beginner issues - issues which should only require a few lines of code, and a test or two.</li> <li>Help wanted issues - issues which should be a bit more involved than <code>beginner</code> issues.</li> </ul>"},{"location":"contributing/#pull-requests","title":"Pull Requests","text":"<ul> <li>Fill in the required template</li> <li>Do not include issue numbers in the PR title</li> <li>Follow the Python style guide</li> <li>Include thoughtfully-worded, well-structured tests in the <code>./tests</code> folder. Run them using <code>pytest</code>.</li> <li>Document new code based on the Documentation Styleguide</li> <li>End all files with a newline</li> </ul>"},{"location":"contributing/#styleguides","title":"Styleguides","text":""},{"location":"contributing/#git-commit-messages","title":"Git Commit Messages","text":"<ul> <li>Use the present tense (\"Add feature\" not \"Added feature\")</li> <li>Use the imperative mood (\"Move cursor to...\" not \"Moves cursor to...\")</li> <li>Limit the first line to 72 characters or less</li> <li>Reference issues and pull requests liberally after the first line</li> <li>Consider starting the commit message with an applicable emoji:<ul> <li>:art: <code>:art:</code> when improving the format/structure of the code</li> <li>:racehorse: <code>:racehorse:</code> when improving performance</li> <li>:non-potable_water: <code>:non-potable_water:</code> when plugging memory leaks</li> <li>:memo: <code>:memo:</code> when writing docs</li> <li>:penguin: <code>:penguin:</code> when fixing something on Linux</li> <li>:apple: <code>:apple:</code> when fixing something on macOS</li> <li>:checkered_flag: <code>:checkered_flag:</code> when fixing something on Windows</li> <li>:bug: <code>:bug:</code> when fixing a bug</li> <li>:fire: <code>:fire:</code> when removing code or files</li> <li>:green_heart: <code>:green_heart:</code> when fixing the CI build</li> <li>:white_check_mark: <code>:white_check_mark:</code> when adding tests</li> <li>:lock: <code>:lock:</code> when dealing with security</li> <li>:arrow_up: <code>:arrow_up:</code> when upgrading dependencies</li> <li>:arrow_down: <code>:arrow_down:</code> when downgrading dependencies</li> <li>:shirt: <code>:shirt:</code> when removing linter warnings</li> </ul> </li> </ul>"},{"location":"contributing/#python-styleguide","title":"Python Styleguide","text":"<p>All Python code must adhere to PEP 8.</p>"},{"location":"contributing/#documentation-styleguide","title":"Documentation Styleguide","text":"<ul> <li>Use Markdown.</li> <li>Use Google-style docstrings for Python code.</li> </ul>"},{"location":"contributing/#additional-notes","title":"Additional Notes","text":""},{"location":"contributing/#issue-and-pull-request-labels","title":"Issue and Pull Request Labels","text":"<p>This section lists the labels we use to help us track and manage issues and pull requests.</p> <p>GitHub search makes it easy to use labels for finding groups of issues or pull requests you're interested in.</p>"},{"location":"contributing/#type-of-issue-and-issue-state","title":"Type of Issue and Issue State","text":"<ul> <li><code>bug</code> - Issues that are bugs.</li> <li><code>enhancement</code> - Issues that are feature requests.</li> <li><code>question</code> - Issues that are questions.</li> <li><code>duplicate</code> - Issues that are duplicates of other issues.</li> <li><code>good first issue</code> - Issues that are good for newcomers.</li> <li><code>help wanted</code> - Issues that need assistance from the community.</li> </ul>"},{"location":"contributing/#topic-categories","title":"Topic Categories","text":"<ul> <li><code>documentation</code> - Issues related to documentation.</li> <li><code>performance</code> - Issues related to performance.</li> <li><code>security</code> - Issues related to security.</li> </ul>"},{"location":"contributing/#pull-request-labels","title":"Pull Request Labels","text":"<ul> <li><code>work-in-progress</code> - Pull requests that are still being worked on, more changes will follow.</li> <li><code>needs-review</code> - Pull requests that need code review and approval from maintainers.</li> <li><code>under-review</code> - Pull requests being reviewed by maintainers.</li> <li><code>requires-changes</code> - Pull requests that need to be updated based on review comments and then reviewed again.</li> <li><code>needs-testing</code> - Pull requests that need manual testing.</li> </ul> <p>Thank you for your contributions to signalrgb-python!</p>"},{"location":"development/","title":"Development Guide","text":"<p>This guide will help you set up your development environment for contributing to signalrgb-python.</p>"},{"location":"development/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following installed on your system:</p> <ul> <li>Python 3.12 or higher</li> <li>Poetry for dependency management</li> <li>Git for version control</li> </ul>"},{"location":"development/#setting-up-the-development-environment","title":"Setting Up the Development Environment","text":"<ol> <li> <p>Clone the repository:    <pre><code>git clone https://github.com/hyperb1iss/signalrgb-python.git\ncd signalrgb-python\n</code></pre></p> </li> <li> <p>Install the project dependencies using Poetry:    <pre><code>poetry install\n</code></pre></p> </li> <li> <p>Activate the virtual environment:    <pre><code>poetry shell\n</code></pre></p> </li> </ol>"},{"location":"development/#running-tests","title":"Running Tests","text":"<p>We use pytest for our test suite. To run the tests:</p> <pre><code>poetry run pytest\n</code></pre> <p>To run tests with coverage report:</p> <pre><code>poetry run pytest --cov=signalrgb --cov-report=term-missing\n</code></pre>"},{"location":"development/#linting","title":"Linting","text":"<p>We use Ruff for linting and formatting. To run the linter:</p> <pre><code>poetry run ruff check .\n</code></pre> <p>To automatically fix linting issues:</p> <pre><code>poetry run ruff check --fix .\n</code></pre>"},{"location":"development/#type-checking","title":"Type Checking","text":"<p>We use mypy for static type checking. To run the type checker:</p> <pre><code>poetry run mypy signalrgb\n</code></pre>"},{"location":"development/#pre-commit-hooks","title":"Pre-commit Hooks","text":"<p>We use pre-commit hooks to ensure code quality before committing. To set up pre-commit hooks:</p> <ol> <li> <p>Install pre-commit:    <pre><code>poetry run pre-commit install\n</code></pre></p> </li> <li> <p>Run pre-commit on all files:    <pre><code>poetry run pre-commit run --all-files\n</code></pre></p> </li> </ol> <p>The pre-commit hooks will now run automatically on <code>git commit</code>.</p>"},{"location":"development/#building-documentation","title":"Building Documentation","text":"<p>To build the documentation locally:</p> <ol> <li> <p>Install the documentation dependencies:    <pre><code>poetry add mkdocs mkdocs-material mkdocstrings[python]\n</code></pre></p> </li> <li> <p>Build and serve the documentation:    <pre><code>poetry run mkdocs serve\n</code></pre></p> </li> <li> <p>Open your browser and navigate to <code>http://127.0.0.1:8000/</code> to view the documentation.</p> </li> </ol>"},{"location":"development/#creating-a-new-release","title":"Creating a New Release","text":"<ol> <li> <p>Update the version number in <code>pyproject.toml</code>:    <pre><code>poetry version patch  # or minor, or major\n</code></pre></p> </li> <li> <p>Update the <code>CHANGELOG.md</code> file with the changes for the new version.</p> </li> <li> <p>Commit the changes:    <pre><code>git add pyproject.toml CHANGELOG.md\ngit commit -m \"Bump version to x.y.z\"\n</code></pre></p> </li> <li> <p>Create a new tag:    <pre><code>git tag -a vx.y.z -m \"Release version x.y.z\"\n</code></pre></p> </li> <li> <p>Push the changes and the new tag:    <pre><code>git push origin main --tags\n</code></pre></p> </li> </ol> <p>The CI/CD pipeline will handle the rest, including building and publishing the package to PyPI and deploying the updated documentation.</p>"},{"location":"development/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter any issues during development, please check the following:</p> <ol> <li>Ensure you're using the correct version of Python (3.12+).</li> <li>Make sure all dependencies are up to date (<code>poetry update</code>).</li> <li>Check that your virtual environment is activated (<code>poetry shell</code>).</li> <li>Clear any cached files: <code>find . -name '*.pyc' -delete</code> and <code>find . -name '__pycache__' -type d -delete</code></li> </ol> <p>If you're still having problems, please open an issue on the GitHub repository with a detailed description of the problem and steps to reproduce it.</p>"},{"location":"development/#getting-help","title":"Getting Help","text":"<p>If you need help with development, you can:</p> <ol> <li>Open an issue on the GitHub repository.</li> <li>Reach out to the maintainers directly (contact information can be found in the <code>README.md</code> file).</li> </ol>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<p>Before installing signalrgb-python, ensure you have the following:</p> <ul> <li>Python 3.12 or higher</li> <li>SignalRGB Pro (required for API access)</li> </ul> <p>This library uses the SignalRGB REST API, which is only available in SignalRGB Pro.</p>"},{"location":"installation/#installing-with-pip","title":"Installing with pip","text":"<p>The easiest way to install signalrgb-python is using pip:</p> <pre><code>pip install signalrgb\n</code></pre>"},{"location":"installation/#installing-with-poetry","title":"Installing with Poetry","text":"<p>If you prefer to use Poetry for dependency management:</p> <pre><code>poetry add signalrgb\n</code></pre>"},{"location":"installation/#verifying-the-installation","title":"Verifying the Installation","text":"<p>After installation, you can verify that signalrgb-python is correctly installed by running:</p> <pre><code>signalrgb --version\n</code></pre> <p>This should display the version number of the installed client.</p>"},{"location":"installation/#next-steps","title":"Next Steps","text":"<p>Now that you have installed signalrgb-python, you can start using it. Check out the CLI Usage guide to learn how to use the command-line interface, or the Python Library Usage guide to learn how to integrate it into your Python projects.</p>"},{"location":"api/client/","title":"SignalRGB Client API Reference","text":"<p>This page provides detailed API documentation for the <code>SignalRGBClient</code> class, which is the main interface for interacting with the SignalRGB API.</p>"},{"location":"api/client/#signalrgbclient","title":"SignalRGBClient","text":""},{"location":"api/client/#signalrgb.client.SignalRGBClient","title":"<code>signalrgb.client.SignalRGBClient</code>","text":"<p>Client for interacting with the SignalRGB API.</p> <p>This class provides methods to interact with the SignalRGB API, allowing users to retrieve, apply, and manage lighting effects.</p> Source code in <code>signalrgb/client.py</code> <pre><code>class SignalRGBClient:\n    \"\"\"Client for interacting with the SignalRGB API.\n\n    This class provides methods to interact with the SignalRGB API, allowing users\n    to retrieve, apply, and manage lighting effects.\n    \"\"\"\n\n    def __init__(\n        self, host: str = \"localhost\", port: int = DEFAULT_PORT, timeout: float = 10.0\n    ):\n        \"\"\"Initialize the SignalRGBClient.\n\n        Args:\n            host (str): The host of the SignalRGB API. Defaults to 'localhost'.\n            port (int): The port of the SignalRGB API. Defaults to 16038.\n            timeout (float): The timeout for API requests in seconds. Defaults to 10.0.\n\n        Example:\n            &gt;&gt;&gt; client = SignalRGBClient()\n            &gt;&gt;&gt; client = SignalRGBClient(\"192.168.1.100\", 8080, 5.0)\n        \"\"\"\n        self._base_url = f\"http://{host}:{port}\"\n        self._session = requests.Session()\n        self._timeout = timeout\n\n    def _request(self, method: str, endpoint: str, **kwargs) -&gt; dict:\n        \"\"\"Make a request to the API and return the JSON response.\n\n        Args:\n            method (str): The HTTP method to use for the request.\n            endpoint (str): The API endpoint to request.\n            **kwargs: Additional keyword arguments to pass to the request.\n\n        Returns:\n            dict: The JSON response from the API.\n\n        Raises:\n            ConnectionError: If there's an issue connecting to the API.\n            APIError: If the API returns an error response.\n            SignalRGBException: For any other request-related errors.\n        \"\"\"\n        url = f\"{self._base_url}{endpoint}\"\n        try:\n            response = self._session.request(\n                method, url, timeout=self._timeout, **kwargs\n            )\n            response.raise_for_status()\n            return response.json()\n        except requests.ConnectionError as e:\n            raise ConnectionError(\n                f\"Failed to connect to SignalRGB API: {e}\", Error(title=str(e))\n            )\n        except Timeout:\n            raise ConnectionError(\"Request timed out\", Error(title=\"Request Timeout\"))\n        except requests.HTTPError as e:\n            if e.response is not None:\n                error_data = e.response.json().get(\"errors\", [{}])[0]\n                error = Error.from_dict(error_data)\n                raise APIError(f\"HTTP error occurred: {e}\", error)\n            raise APIError(f\"HTTP error occurred: {e}\", Error(title=str(e)))\n        except RequestException as e:\n            raise SignalRGBException(f\"An error occurred while making the request: {e}\")\n\n    @lru_cache(maxsize=1)\n    def get_effects(self) -&gt; List[Effect]:\n        \"\"\"List available effects.\n\n        Returns:\n            List[Effect]: A list of available effects.\n\n        Raises:\n            APIError: If there's an error retrieving the effects.\n\n        Example:\n            &gt;&gt;&gt; client = SignalRGBClient()\n            &gt;&gt;&gt; effects = client.get_effects()\n            &gt;&gt;&gt; print(f\"Found {len(effects)} effects\")\n        \"\"\"\n        try:\n            response_data = self._request(\"GET\", f\"{LIGHTING_V1}/effects\")\n            response = EffectListResponse.from_dict(response_data)\n            self._ensure_response_ok(response)\n            effects = response.data\n            if effects is None or effects.items is None:\n                raise APIError(\"No effects data in the response\")\n            return effects.items\n        except (ConnectionError, Timeout):\n            raise\n        except APIError:\n            raise\n        except Exception as e:\n            raise APIError(f\"Failed to retrieve effects: {e}\", Error(title=str(e)))\n\n    def get_effect(self, effect_id: str) -&gt; Effect:\n        \"\"\"Get details of a specific effect.\n\n        Args:\n            effect_id (str): The ID of the effect to retrieve.\n\n        Returns:\n            Effect: The requested effect.\n\n        Raises:\n            EffectNotFoundError: If the effect with the given ID is not found.\n            APIError: If there's an error retrieving the effect.\n\n        Example:\n            &gt;&gt;&gt; client = SignalRGBClient()\n            &gt;&gt;&gt; effect = client.get_effect(\"example_effect_id\")\n            &gt;&gt;&gt; print(f\"Effect name: {effect.attributes.name}\")\n        \"\"\"\n        try:\n            response_data = self._request(\"GET\", f\"{LIGHTING_V1}/effects/{effect_id}\")\n            response = EffectDetailsResponse.from_dict(response_data)\n            self._ensure_response_ok(response)\n            if response.data is None:\n                raise APIError(\"No effect data in the response\")\n            return response.data\n        except APIError as e:\n            if e.error and e.error.code == \"not_found\":\n                raise EffectNotFoundError(\n                    f\"Effect with ID '{effect_id}' not found\", e.error\n                )\n            raise\n\n    def _find_effect_by_name(self, effect_name: str) -&gt; Optional[Effect]:\n        \"\"\"Find an effect by its name.\n\n        Args:\n            effect_name (str): The name of the effect to find.\n\n        Returns:\n            Optional[Effect]: The found effect, or None if not found.\n        \"\"\"\n        return next(\n            (e for e in self.get_effects() if e.attributes.name == effect_name), None\n        )\n\n    def get_effect_by_name(self, effect_name: str) -&gt; Effect:\n        \"\"\"Get details of a specific effect by name.\n\n        Args:\n            effect_name (str): The name of the effect to retrieve.\n\n        Returns:\n            Effect: The requested effect.\n\n        Raises:\n            EffectNotFoundError: If the effect with the given name is not found.\n\n        Example:\n            &gt;&gt;&gt; client = SignalRGBClient()\n            &gt;&gt;&gt; effect = client.get_effect_by_name(\"Rainbow Wave\")\n            &gt;&gt;&gt; print(f\"Effect ID: {effect.id}\")\n        \"\"\"\n        effect = self._find_effect_by_name(effect_name)\n        if effect is None:\n            raise EffectNotFoundError(f\"Effect '{effect_name}' not found\")\n\n        return self.get_effect(effect.id)\n\n    def get_current_effect(self) -&gt; Effect:\n        \"\"\"Get the current effect.\n\n        Returns:\n            Effect: The currently active effect.\n\n        Raises:\n            APIError: If there's an error retrieving the current effect.\n\n        Example:\n            &gt;&gt;&gt; client = SignalRGBClient()\n            &gt;&gt;&gt; current_effect = client.get_current_effect()\n            &gt;&gt;&gt; print(f\"Current effect: {current_effect.attributes.name}\")\n        \"\"\"\n        try:\n            response_data = self._request(\"GET\", f\"{LIGHTING_V1}\")\n            response = EffectDetailsResponse.from_dict(response_data)\n            self._ensure_response_ok(response)\n            if response.data is None:\n                raise APIError(\"No current effect data in the response\")\n            return self.get_effect(response.data.id)\n        except Exception as e:\n            raise APIError(\n                f\"Failed to retrieve current effect: {e}\", Error(title=str(e))\n            )\n\n    def apply_effect(self, effect_id: str) -&gt; None:\n        \"\"\"Apply an effect.\n\n        Args:\n            effect_id (str): The ID of the effect to apply.\n\n        Raises:\n            EffectNotFoundError: If the effect with the given ID is not found.\n            SignalRGBException: If there's an error applying the effect.\n\n        Example:\n            &gt;&gt;&gt; client = SignalRGBClient()\n            &gt;&gt;&gt; client.apply_effect(\"example_effect_id\")\n            &gt;&gt;&gt; print(\"Effect applied successfully\")\n        \"\"\"\n        try:\n            response_data = self._request(\n                \"POST\", f\"{LIGHTING_V1}/effects/{effect_id}/apply\"\n            )\n            response = SignalRGBResponse.from_dict(response_data)\n            self._ensure_response_ok(response)\n        except APIError as e:\n            if e.error and e.error.code == \"not_found\":\n                raise EffectNotFoundError(\n                    f\"Effect with ID '{effect_id}' not found\", e.error\n                )\n            raise\n        except Exception as e:\n            raise SignalRGBException(\n                f\"Failed to apply effect: {e}\", Error(title=str(e))\n            )\n\n    def apply_effect_by_name(self, effect_name: str) -&gt; None:\n        \"\"\"Apply an effect by name.\n\n        Args:\n            effect_name (str): The name of the effect to apply.\n\n        Raises:\n            EffectNotFoundError: If the effect with the given name is not found.\n            SignalRGBException: If there's an error applying the effect.\n\n        Example:\n            &gt;&gt;&gt; client = SignalRGBClient()\n            &gt;&gt;&gt; client.apply_effect_by_name(\"Rainbow Wave\")\n            &gt;&gt;&gt; print(\"Effect applied successfully\")\n        \"\"\"\n        try:\n            effect = self.get_effect_by_name(effect_name)\n            self._request(\"POST\", cast(str, effect.links.apply))\n        except EffectNotFoundError:\n            raise\n        except Exception as e:\n            raise SignalRGBException(\n                f\"Failed to apply effect '{effect_name}': {e}\", Error(title=str(e))\n            )\n\n    @staticmethod\n    def _ensure_response_ok(response: SignalRGBResponse) -&gt; None:\n        \"\"\"Ensure the response status is 'ok'.\n\n        Args:\n            response (SignalRGBResponse): The response to check.\n\n        Raises:\n            APIError: If the response status is not 'ok'.\n        \"\"\"\n        if response.status != \"ok\":\n            error = response.errors[0] if response.errors else None\n            raise APIError(f\"API returned non-OK status: {response.status}\", error)\n\n    def refresh_effects(self) -&gt; None:\n        \"\"\"Refresh the cached effects.\n\n        This method clears the cache for the get_effects method, forcing a fresh\n        retrieval of effects on the next call.\n\n        Example:\n            &gt;&gt;&gt; client = SignalRGBClient()\n            &gt;&gt;&gt; client.refresh_effects()\n            &gt;&gt;&gt; fresh_effects = client.get_effects()\n        \"\"\"\n        self.get_effects.cache_clear()\n</code></pre>"},{"location":"api/client/#signalrgb.client.SignalRGBClient.__init__","title":"<code>__init__(host='localhost', port=DEFAULT_PORT, timeout=10.0)</code>","text":"<p>Initialize the SignalRGBClient.</p> <p>Parameters:</p> Name Type Description Default <code>host</code> <code>str</code> <p>The host of the SignalRGB API. Defaults to 'localhost'.</p> <code>'localhost'</code> <code>port</code> <code>int</code> <p>The port of the SignalRGB API. Defaults to 16038.</p> <code>DEFAULT_PORT</code> <code>timeout</code> <code>float</code> <p>The timeout for API requests in seconds. Defaults to 10.0.</p> <code>10.0</code> Example <p>client = SignalRGBClient() client = SignalRGBClient(\"192.168.1.100\", 8080, 5.0)</p> Source code in <code>signalrgb/client.py</code> <pre><code>def __init__(\n    self, host: str = \"localhost\", port: int = DEFAULT_PORT, timeout: float = 10.0\n):\n    \"\"\"Initialize the SignalRGBClient.\n\n    Args:\n        host (str): The host of the SignalRGB API. Defaults to 'localhost'.\n        port (int): The port of the SignalRGB API. Defaults to 16038.\n        timeout (float): The timeout for API requests in seconds. Defaults to 10.0.\n\n    Example:\n        &gt;&gt;&gt; client = SignalRGBClient()\n        &gt;&gt;&gt; client = SignalRGBClient(\"192.168.1.100\", 8080, 5.0)\n    \"\"\"\n    self._base_url = f\"http://{host}:{port}\"\n    self._session = requests.Session()\n    self._timeout = timeout\n</code></pre>"},{"location":"api/client/#signalrgb.client.SignalRGBClient.apply_effect","title":"<code>apply_effect(effect_id)</code>","text":"<p>Apply an effect.</p> <p>Parameters:</p> Name Type Description Default <code>effect_id</code> <code>str</code> <p>The ID of the effect to apply.</p> required <p>Raises:</p> Type Description <code>EffectNotFoundError</code> <p>If the effect with the given ID is not found.</p> <code>SignalRGBException</code> <p>If there's an error applying the effect.</p> Example <p>client = SignalRGBClient() client.apply_effect(\"example_effect_id\") print(\"Effect applied successfully\")</p> Source code in <code>signalrgb/client.py</code> <pre><code>def apply_effect(self, effect_id: str) -&gt; None:\n    \"\"\"Apply an effect.\n\n    Args:\n        effect_id (str): The ID of the effect to apply.\n\n    Raises:\n        EffectNotFoundError: If the effect with the given ID is not found.\n        SignalRGBException: If there's an error applying the effect.\n\n    Example:\n        &gt;&gt;&gt; client = SignalRGBClient()\n        &gt;&gt;&gt; client.apply_effect(\"example_effect_id\")\n        &gt;&gt;&gt; print(\"Effect applied successfully\")\n    \"\"\"\n    try:\n        response_data = self._request(\n            \"POST\", f\"{LIGHTING_V1}/effects/{effect_id}/apply\"\n        )\n        response = SignalRGBResponse.from_dict(response_data)\n        self._ensure_response_ok(response)\n    except APIError as e:\n        if e.error and e.error.code == \"not_found\":\n            raise EffectNotFoundError(\n                f\"Effect with ID '{effect_id}' not found\", e.error\n            )\n        raise\n    except Exception as e:\n        raise SignalRGBException(\n            f\"Failed to apply effect: {e}\", Error(title=str(e))\n        )\n</code></pre>"},{"location":"api/client/#signalrgb.client.SignalRGBClient.apply_effect_by_name","title":"<code>apply_effect_by_name(effect_name)</code>","text":"<p>Apply an effect by name.</p> <p>Parameters:</p> Name Type Description Default <code>effect_name</code> <code>str</code> <p>The name of the effect to apply.</p> required <p>Raises:</p> Type Description <code>EffectNotFoundError</code> <p>If the effect with the given name is not found.</p> <code>SignalRGBException</code> <p>If there's an error applying the effect.</p> Example <p>client = SignalRGBClient() client.apply_effect_by_name(\"Rainbow Wave\") print(\"Effect applied successfully\")</p> Source code in <code>signalrgb/client.py</code> <pre><code>def apply_effect_by_name(self, effect_name: str) -&gt; None:\n    \"\"\"Apply an effect by name.\n\n    Args:\n        effect_name (str): The name of the effect to apply.\n\n    Raises:\n        EffectNotFoundError: If the effect with the given name is not found.\n        SignalRGBException: If there's an error applying the effect.\n\n    Example:\n        &gt;&gt;&gt; client = SignalRGBClient()\n        &gt;&gt;&gt; client.apply_effect_by_name(\"Rainbow Wave\")\n        &gt;&gt;&gt; print(\"Effect applied successfully\")\n    \"\"\"\n    try:\n        effect = self.get_effect_by_name(effect_name)\n        self._request(\"POST\", cast(str, effect.links.apply))\n    except EffectNotFoundError:\n        raise\n    except Exception as e:\n        raise SignalRGBException(\n            f\"Failed to apply effect '{effect_name}': {e}\", Error(title=str(e))\n        )\n</code></pre>"},{"location":"api/client/#signalrgb.client.SignalRGBClient.get_current_effect","title":"<code>get_current_effect()</code>","text":"<p>Get the current effect.</p> <p>Returns:</p> Name Type Description <code>Effect</code> <code>Effect</code> <p>The currently active effect.</p> <p>Raises:</p> Type Description <code>APIError</code> <p>If there's an error retrieving the current effect.</p> Example <p>client = SignalRGBClient() current_effect = client.get_current_effect() print(f\"Current effect: {current_effect.attributes.name}\")</p> Source code in <code>signalrgb/client.py</code> <pre><code>def get_current_effect(self) -&gt; Effect:\n    \"\"\"Get the current effect.\n\n    Returns:\n        Effect: The currently active effect.\n\n    Raises:\n        APIError: If there's an error retrieving the current effect.\n\n    Example:\n        &gt;&gt;&gt; client = SignalRGBClient()\n        &gt;&gt;&gt; current_effect = client.get_current_effect()\n        &gt;&gt;&gt; print(f\"Current effect: {current_effect.attributes.name}\")\n    \"\"\"\n    try:\n        response_data = self._request(\"GET\", f\"{LIGHTING_V1}\")\n        response = EffectDetailsResponse.from_dict(response_data)\n        self._ensure_response_ok(response)\n        if response.data is None:\n            raise APIError(\"No current effect data in the response\")\n        return self.get_effect(response.data.id)\n    except Exception as e:\n        raise APIError(\n            f\"Failed to retrieve current effect: {e}\", Error(title=str(e))\n        )\n</code></pre>"},{"location":"api/client/#signalrgb.client.SignalRGBClient.get_effect","title":"<code>get_effect(effect_id)</code>","text":"<p>Get details of a specific effect.</p> <p>Parameters:</p> Name Type Description Default <code>effect_id</code> <code>str</code> <p>The ID of the effect to retrieve.</p> required <p>Returns:</p> Name Type Description <code>Effect</code> <code>Effect</code> <p>The requested effect.</p> <p>Raises:</p> Type Description <code>EffectNotFoundError</code> <p>If the effect with the given ID is not found.</p> <code>APIError</code> <p>If there's an error retrieving the effect.</p> Example <p>client = SignalRGBClient() effect = client.get_effect(\"example_effect_id\") print(f\"Effect name: {effect.attributes.name}\")</p> Source code in <code>signalrgb/client.py</code> <pre><code>def get_effect(self, effect_id: str) -&gt; Effect:\n    \"\"\"Get details of a specific effect.\n\n    Args:\n        effect_id (str): The ID of the effect to retrieve.\n\n    Returns:\n        Effect: The requested effect.\n\n    Raises:\n        EffectNotFoundError: If the effect with the given ID is not found.\n        APIError: If there's an error retrieving the effect.\n\n    Example:\n        &gt;&gt;&gt; client = SignalRGBClient()\n        &gt;&gt;&gt; effect = client.get_effect(\"example_effect_id\")\n        &gt;&gt;&gt; print(f\"Effect name: {effect.attributes.name}\")\n    \"\"\"\n    try:\n        response_data = self._request(\"GET\", f\"{LIGHTING_V1}/effects/{effect_id}\")\n        response = EffectDetailsResponse.from_dict(response_data)\n        self._ensure_response_ok(response)\n        if response.data is None:\n            raise APIError(\"No effect data in the response\")\n        return response.data\n    except APIError as e:\n        if e.error and e.error.code == \"not_found\":\n            raise EffectNotFoundError(\n                f\"Effect with ID '{effect_id}' not found\", e.error\n            )\n        raise\n</code></pre>"},{"location":"api/client/#signalrgb.client.SignalRGBClient.get_effect_by_name","title":"<code>get_effect_by_name(effect_name)</code>","text":"<p>Get details of a specific effect by name.</p> <p>Parameters:</p> Name Type Description Default <code>effect_name</code> <code>str</code> <p>The name of the effect to retrieve.</p> required <p>Returns:</p> Name Type Description <code>Effect</code> <code>Effect</code> <p>The requested effect.</p> <p>Raises:</p> Type Description <code>EffectNotFoundError</code> <p>If the effect with the given name is not found.</p> Example <p>client = SignalRGBClient() effect = client.get_effect_by_name(\"Rainbow Wave\") print(f\"Effect ID: {effect.id}\")</p> Source code in <code>signalrgb/client.py</code> <pre><code>def get_effect_by_name(self, effect_name: str) -&gt; Effect:\n    \"\"\"Get details of a specific effect by name.\n\n    Args:\n        effect_name (str): The name of the effect to retrieve.\n\n    Returns:\n        Effect: The requested effect.\n\n    Raises:\n        EffectNotFoundError: If the effect with the given name is not found.\n\n    Example:\n        &gt;&gt;&gt; client = SignalRGBClient()\n        &gt;&gt;&gt; effect = client.get_effect_by_name(\"Rainbow Wave\")\n        &gt;&gt;&gt; print(f\"Effect ID: {effect.id}\")\n    \"\"\"\n    effect = self._find_effect_by_name(effect_name)\n    if effect is None:\n        raise EffectNotFoundError(f\"Effect '{effect_name}' not found\")\n\n    return self.get_effect(effect.id)\n</code></pre>"},{"location":"api/client/#signalrgb.client.SignalRGBClient.get_effects","title":"<code>get_effects()</code>  <code>cached</code>","text":"<p>List available effects.</p> <p>Returns:</p> Type Description <code>List[Effect]</code> <p>List[Effect]: A list of available effects.</p> <p>Raises:</p> Type Description <code>APIError</code> <p>If there's an error retrieving the effects.</p> Example <p>client = SignalRGBClient() effects = client.get_effects() print(f\"Found {len(effects)} effects\")</p> Source code in <code>signalrgb/client.py</code> <pre><code>@lru_cache(maxsize=1)\ndef get_effects(self) -&gt; List[Effect]:\n    \"\"\"List available effects.\n\n    Returns:\n        List[Effect]: A list of available effects.\n\n    Raises:\n        APIError: If there's an error retrieving the effects.\n\n    Example:\n        &gt;&gt;&gt; client = SignalRGBClient()\n        &gt;&gt;&gt; effects = client.get_effects()\n        &gt;&gt;&gt; print(f\"Found {len(effects)} effects\")\n    \"\"\"\n    try:\n        response_data = self._request(\"GET\", f\"{LIGHTING_V1}/effects\")\n        response = EffectListResponse.from_dict(response_data)\n        self._ensure_response_ok(response)\n        effects = response.data\n        if effects is None or effects.items is None:\n            raise APIError(\"No effects data in the response\")\n        return effects.items\n    except (ConnectionError, Timeout):\n        raise\n    except APIError:\n        raise\n    except Exception as e:\n        raise APIError(f\"Failed to retrieve effects: {e}\", Error(title=str(e)))\n</code></pre>"},{"location":"api/client/#signalrgb.client.SignalRGBClient.refresh_effects","title":"<code>refresh_effects()</code>","text":"<p>Refresh the cached effects.</p> <p>This method clears the cache for the get_effects method, forcing a fresh retrieval of effects on the next call.</p> Example <p>client = SignalRGBClient() client.refresh_effects() fresh_effects = client.get_effects()</p> Source code in <code>signalrgb/client.py</code> <pre><code>def refresh_effects(self) -&gt; None:\n    \"\"\"Refresh the cached effects.\n\n    This method clears the cache for the get_effects method, forcing a fresh\n    retrieval of effects on the next call.\n\n    Example:\n        &gt;&gt;&gt; client = SignalRGBClient()\n        &gt;&gt;&gt; client.refresh_effects()\n        &gt;&gt;&gt; fresh_effects = client.get_effects()\n    \"\"\"\n    self.get_effects.cache_clear()\n</code></pre>"},{"location":"api/client/#exceptions","title":"Exceptions","text":"<p>The SignalRGB client defines several custom exceptions for error handling:</p>"},{"location":"api/client/#signalrgb.client.SignalRGBException","title":"<code>signalrgb.client.SignalRGBException</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Base exception for SignalRGB errors.</p> <p>This exception is raised when a general error occurs during API interactions.</p> <p>Attributes:</p> Name Type Description <code>message</code> <code>str</code> <p>The error message.</p> <code>error</code> <code>Optional[Error]</code> <p>The Error object containing additional error details.</p> Source code in <code>signalrgb/client.py</code> <pre><code>class SignalRGBException(Exception):\n    \"\"\"Base exception for SignalRGB errors.\n\n    This exception is raised when a general error occurs during API interactions.\n\n    Attributes:\n        message (str): The error message.\n        error (Optional[Error]): The Error object containing additional error details.\n    \"\"\"\n\n    def __init__(self, message: str, error: Optional[Error] = None):\n        super().__init__(message)\n        self.error = error\n\n    @property\n    def code(self) -&gt; Optional[str]:\n        \"\"\"Optional[str]: The error code, if available.\"\"\"\n        return self.error.code if self.error else None\n\n    @property\n    def title(self) -&gt; Optional[str]:\n        \"\"\"Optional[str]: The error title, if available.\"\"\"\n        return self.error.title if self.error else None\n\n    @property\n    def detail(self) -&gt; Optional[str]:\n        \"\"\"Optional[str]: The detailed error message, if available.\"\"\"\n        return self.error.detail if self.error else None\n</code></pre>"},{"location":"api/client/#signalrgb.client.SignalRGBException.code","title":"<code>code: Optional[str]</code>  <code>property</code>","text":"<p>Optional[str]: The error code, if available.</p>"},{"location":"api/client/#signalrgb.client.SignalRGBException.detail","title":"<code>detail: Optional[str]</code>  <code>property</code>","text":"<p>Optional[str]: The detailed error message, if available.</p>"},{"location":"api/client/#signalrgb.client.SignalRGBException.title","title":"<code>title: Optional[str]</code>  <code>property</code>","text":"<p>Optional[str]: The error title, if available.</p>"},{"location":"api/client/#signalrgb.client.ConnectionError","title":"<code>signalrgb.client.ConnectionError</code>","text":"<p>               Bases: <code>SignalRGBException</code></p> <p>Exception raised for connection errors.</p> <p>This exception is raised when there's an issue connecting to the SignalRGB API.</p> Source code in <code>signalrgb/client.py</code> <pre><code>class ConnectionError(SignalRGBException):\n    \"\"\"Exception raised for connection errors.\n\n    This exception is raised when there's an issue connecting to the SignalRGB API.\n    \"\"\"\n\n    pass\n</code></pre>"},{"location":"api/client/#signalrgb.client.APIError","title":"<code>signalrgb.client.APIError</code>","text":"<p>               Bases: <code>SignalRGBException</code></p> <p>Exception raised for API errors.</p> <p>This exception is raised when the API returns an error response.</p> Source code in <code>signalrgb/client.py</code> <pre><code>class APIError(SignalRGBException):\n    \"\"\"Exception raised for API errors.\n\n    This exception is raised when the API returns an error response.\n    \"\"\"\n\n    pass\n</code></pre>"},{"location":"api/client/#signalrgb.client.EffectNotFoundError","title":"<code>signalrgb.client.EffectNotFoundError</code>","text":"<p>               Bases: <code>SignalRGBException</code></p> <p>Exception raised when an effect is not found.</p> <p>This exception is raised when trying to retrieve or apply a non-existent effect.</p> Source code in <code>signalrgb/client.py</code> <pre><code>class EffectNotFoundError(SignalRGBException):\n    \"\"\"Exception raised when an effect is not found.\n\n    This exception is raised when trying to retrieve or apply a non-existent effect.\n    \"\"\"\n\n    pass\n</code></pre>"},{"location":"api/client/#usage-example","title":"Usage Example","text":"<p>Here's a basic example of how to use the SignalRGBClient:</p> <pre><code>from signalrgb import SignalRGBClient\n\n# Initialize the client\nclient = SignalRGBClient(host=\"localhost\", port=16038)\n\n# Get all effects\neffects = client.get_effects()\nfor effect in effects:\n    print(f\"Effect: {effect.attributes.name}\")\n\n# Apply an effect\nclient.apply_effect_by_name(\"Rainbow Wave\")\n\n# Get current effect\ncurrent_effect = client.get_current_effect()\nprint(f\"Current effect: {current_effect.attributes.name}\")\n</code></pre> <p>For more detailed usage examples, please refer to the Python Library Usage guide.</p>"},{"location":"api/models/","title":"SignalRGB Models API Reference","text":"<p>This page provides detailed API documentation for the data models used in the SignalRGB Python client. These models represent various data structures used in the SignalRGB API, including effects, responses, and error information.</p>"},{"location":"api/models/#attributes","title":"Attributes","text":""},{"location":"api/models/#signalrgb.model.Attributes","title":"<code>signalrgb.model.Attributes</code>  <code>dataclass</code>","text":"<p>               Bases: <code>DataClassDictMixin</code></p> <p>Attributes of an effect in SignalRGB.</p> <p>This class represents the various properties and capabilities of an effect. It includes details such as the effect's name, description, publisher, and various flags indicating the effect's capabilities.</p> <p>Attributes:</p> Name Type Description <code>description</code> <code>Optional[str]</code> <p>A description of the effect.</p> <code>developer_effect</code> <code>bool</code> <p>Indicates whether this is a developer-created effect.</p> <code>image</code> <code>Optional[str]</code> <p>URL or path to the effect's image, if available.</p> <code>name</code> <code>str</code> <p>The name of the effect.</p> <code>parameters</code> <code>Dict[str, Any]</code> <p>A dictionary of effect-specific parameters.</p> <code>publisher</code> <code>Optional[str]</code> <p>The publisher or creator of the effect.</p> <code>uses_audio</code> <code>bool</code> <p>Indicates whether the effect uses audio input.</p> <code>uses_input</code> <code>bool</code> <p>Indicates whether the effect uses user input.</p> <code>uses_meters</code> <code>bool</code> <p>Indicates whether the effect uses meter data.</p> <code>uses_video</code> <code>bool</code> <p>Indicates whether the effect uses video input.</p> Source code in <code>signalrgb/model.py</code> <pre><code>@dataclass\nclass Attributes(DataClassDictMixin):\n    \"\"\"\n    Attributes of an effect in SignalRGB.\n\n    This class represents the various properties and capabilities of an effect.\n    It includes details such as the effect's name, description, publisher, and various flags\n    indicating the effect's capabilities.\n\n    Attributes:\n        description (Optional[str]): A description of the effect.\n        developer_effect (bool): Indicates whether this is a developer-created effect.\n        image (Optional[str]): URL or path to the effect's image, if available.\n        name (str): The name of the effect.\n        parameters (Dict[str, Any]): A dictionary of effect-specific parameters.\n        publisher (Optional[str]): The publisher or creator of the effect.\n        uses_audio (bool): Indicates whether the effect uses audio input.\n        uses_input (bool): Indicates whether the effect uses user input.\n        uses_meters (bool): Indicates whether the effect uses meter data.\n        uses_video (bool): Indicates whether the effect uses video input.\n    \"\"\"\n\n    name: str\n    description: Optional[str] = None\n    developer_effect: bool = False\n    image: Optional[str] = None\n    parameters: Dict[str, Any] = field(default_factory=dict)\n    publisher: Optional[str] = None\n    uses_audio: bool = False\n    uses_input: bool = False\n    uses_meters: bool = False\n    uses_video: bool = False\n</code></pre>"},{"location":"api/models/#links","title":"Links","text":""},{"location":"api/models/#signalrgb.model.Links","title":"<code>signalrgb.model.Links</code>  <code>dataclass</code>","text":"<p>               Bases: <code>DataClassDictMixin</code></p> <p>Links associated with an effect in SignalRGB.</p> <p>This class represents the URLs related to an effect, such as where to apply it or retrieve its details.</p> <p>Attributes:</p> Name Type Description <code>apply</code> <code>Optional[str]</code> <p>URL to apply the effect, if available.</p> <code>self_link</code> <code>Optional[str]</code> <p>URL of the effect itself, typically for retrieving its details.</p> Source code in <code>signalrgb/model.py</code> <pre><code>@dataclass\nclass Links(DataClassDictMixin):\n    \"\"\"\n    Links associated with an effect in SignalRGB.\n\n    This class represents the URLs related to an effect, such as where to apply it\n    or retrieve its details.\n\n    Attributes:\n        apply (Optional[str]): URL to apply the effect, if available.\n        self_link (Optional[str]): URL of the effect itself, typically for retrieving its details.\n    \"\"\"\n\n    apply: Optional[str] = None\n    self_link: Optional[str] = None\n\n    class Config(BaseConfig):\n        aliases = {\"self_link\": \"self\"}\n</code></pre>"},{"location":"api/models/#effect","title":"Effect","text":""},{"location":"api/models/#signalrgb.model.Effect","title":"<code>signalrgb.model.Effect</code>  <code>dataclass</code>","text":"<p>               Bases: <code>DataClassDictMixin</code></p> <p>Represents a single effect in SignalRGB.</p> <p>This class combines the attributes and links of an effect with its unique identifier. It provides a complete representation of an effect in the SignalRGB system.</p> <p>Attributes:</p> Name Type Description <code>attributes</code> <code>Attributes</code> <p>The attributes of the effect.</p> <code>id</code> <code>str</code> <p>Unique identifier of the effect.</p> <code>links</code> <code>Links</code> <p>Links associated with the effect.</p> <code>type</code> <code>str</code> <p>Type of the object, typically 'lighting'.</p> Source code in <code>signalrgb/model.py</code> <pre><code>@dataclass\nclass Effect(DataClassDictMixin):\n    \"\"\"\n    Represents a single effect in SignalRGB.\n\n    This class combines the attributes and links of an effect with its unique identifier.\n    It provides a complete representation of an effect in the SignalRGB system.\n\n    Attributes:\n        attributes (Attributes): The attributes of the effect.\n        id (str): Unique identifier of the effect.\n        links (Links): Links associated with the effect.\n        type (str): Type of the object, typically 'lighting'.\n    \"\"\"\n\n    attributes: Attributes\n    id: str\n    links: Links\n    type: str\n</code></pre>"},{"location":"api/models/#effectlist","title":"EffectList","text":""},{"location":"api/models/#signalrgb.model.EffectList","title":"<code>signalrgb.model.EffectList</code>  <code>dataclass</code>","text":"<p>               Bases: <code>DataClassDictMixin</code></p> <p>A list of effects in SignalRGB.</p> <p>This class is used to represent multiple effects, typically in API responses that return a collection of effects.</p> <p>Attributes:</p> Name Type Description <code>items</code> <code>List[Effect]</code> <p>A list of Effect objects.</p> Source code in <code>signalrgb/model.py</code> <pre><code>@dataclass\nclass EffectList(DataClassDictMixin):\n    \"\"\"\n    A list of effects in SignalRGB.\n\n    This class is used to represent multiple effects, typically in API responses\n    that return a collection of effects.\n\n    Attributes:\n        items (List[Effect]): A list of Effect objects.\n    \"\"\"\n\n    items: List[Effect] = field(default_factory=list)\n</code></pre>"},{"location":"api/models/#error","title":"Error","text":""},{"location":"api/models/#signalrgb.model.Error","title":"<code>signalrgb.model.Error</code>  <code>dataclass</code>","text":"<p>               Bases: <code>DataClassDictMixin</code></p> <p>Represents an error returned by the SignalRGB API.</p> <p>This class includes details about the error such as its code, title, and a detailed message. It is typically used when the API encounters an error during request processing.</p> <p>Attributes:</p> Name Type Description <code>code</code> <code>Optional[str]</code> <p>An error code, if provided by the API.</p> <code>detail</code> <code>Optional[str]</code> <p>A detailed error message explaining the issue.</p> <code>title</code> <code>str</code> <p>A brief title or summary of the error.</p> Source code in <code>signalrgb/model.py</code> <pre><code>@dataclass\nclass Error(DataClassDictMixin):\n    \"\"\"\n    Represents an error returned by the SignalRGB API.\n\n    This class includes details about the error such as its code, title, and a detailed message.\n    It is typically used when the API encounters an error during request processing.\n\n    Attributes:\n        code (Optional[str]): An error code, if provided by the API.\n        detail (Optional[str]): A detailed error message explaining the issue.\n        title (str): A brief title or summary of the error.\n    \"\"\"\n\n    title: str\n    code: Optional[str] = None\n    detail: Optional[str] = None\n</code></pre>"},{"location":"api/models/#signalrgbresponse","title":"SignalRGBResponse","text":""},{"location":"api/models/#signalrgb.model.SignalRGBResponse","title":"<code>signalrgb.model.SignalRGBResponse</code>  <code>dataclass</code>","text":"<p>               Bases: <code>DataClassDictMixin</code></p> <p>Base class for responses from the SignalRGB API.</p> <p>This class includes common fields found in all API responses. It serves as a base for more specific response types and provides a consistent structure for handling API responses.</p> <p>Attributes:</p> Name Type Description <code>api_version</code> <code>str</code> <p>The version of the API used for this response.</p> <code>id</code> <code>int</code> <p>A unique identifier for this response.</p> <code>method</code> <code>str</code> <p>The HTTP method used for the request that generated this response.</p> <code>params</code> <code>Dict[str, Any]</code> <p>Any parameters that were part of the request.</p> <code>status</code> <code>str</code> <p>The status of the response, typically 'ok' or 'error'.</p> <code>errors</code> <code>List[Error]</code> <p>A list of Error objects if any errors occurred.</p> Source code in <code>signalrgb/model.py</code> <pre><code>@dataclass\nclass SignalRGBResponse(DataClassDictMixin):\n    \"\"\"\n    Base class for responses from the SignalRGB API.\n\n    This class includes common fields found in all API responses. It serves as a base\n    for more specific response types and provides a consistent structure for handling\n    API responses.\n\n    Attributes:\n        api_version (str): The version of the API used for this response.\n        id (int): A unique identifier for this response.\n        method (str): The HTTP method used for the request that generated this response.\n        params (Dict[str, Any]): Any parameters that were part of the request.\n        status (str): The status of the response, typically 'ok' or 'error'.\n        errors (List[Error]): A list of Error objects if any errors occurred.\n    \"\"\"\n\n    api_version: str\n    id: int\n    method: str\n    status: str\n    params: Dict[str, Any] = field(default_factory=dict)\n    errors: List[Error] = field(default_factory=list)\n</code></pre>"},{"location":"api/models/#effectdetailsresponse","title":"EffectDetailsResponse","text":""},{"location":"api/models/#signalrgb.model.EffectDetailsResponse","title":"<code>signalrgb.model.EffectDetailsResponse</code>  <code>dataclass</code>","text":"<p>               Bases: <code>SignalRGBResponse</code></p> <p>Response model for requests that return details of a single effect.</p> <p>This class extends SignalRGBResponse and includes an additional field for the effect details.</p> <p>Attributes:</p> Name Type Description <code>data</code> <code>Optional[Effect]</code> <p>The details of the requested effect, if available.</p> Source code in <code>signalrgb/model.py</code> <pre><code>@dataclass\nclass EffectDetailsResponse(SignalRGBResponse):\n    \"\"\"\n    Response model for requests that return details of a single effect.\n\n    This class extends SignalRGBResponse and includes an additional field for\n    the effect details.\n\n    Attributes:\n        data (Optional[Effect]): The details of the requested effect, if available.\n    \"\"\"\n\n    data: Optional[Effect] = None\n</code></pre>"},{"location":"api/models/#effectlistresponse","title":"EffectListResponse","text":""},{"location":"api/models/#signalrgb.model.EffectListResponse","title":"<code>signalrgb.model.EffectListResponse</code>  <code>dataclass</code>","text":"<p>               Bases: <code>SignalRGBResponse</code></p> <p>Response model for requests that return a list of effects.</p> <p>This class extends SignalRGBResponse and includes an additional field for the list of effects.</p> <p>Attributes:</p> Name Type Description <code>data</code> <code>Optional[EffectList]</code> <p>The list of effects returned by the API, if available.</p> Source code in <code>signalrgb/model.py</code> <pre><code>@dataclass\nclass EffectListResponse(SignalRGBResponse):\n    \"\"\"\n    Response model for requests that return a list of effects.\n\n    This class extends SignalRGBResponse and includes an additional field for\n    the list of effects.\n\n    Attributes:\n        data (Optional[EffectList]): The list of effects returned by the API, if available.\n    \"\"\"\n\n    data: Optional[EffectList] = None\n</code></pre>"},{"location":"api/models/#usage-example","title":"Usage Example","text":"<p>Here's a basic example of how to work with these models:</p> <pre><code>from signalrgb import SignalRGBClient\nfrom signalrgb.model import Effect, Attributes\n\n# Initialize the client\nclient = SignalRGBClient()\n\n# Get an effect\neffect: Effect = client.get_effect_by_name(\"Sakura\")\n\n# Access effect attributes\nprint(f\"Effect name: {effect.attributes.name}\")\nprint(f\"Effect description: {effect.attributes.description}\")\nprint(f\"Effect uses audio: {effect.attributes.uses_audio}\")\n\n# Create a new effect (note: this is just an example, you can't actually create new effects via the API)\nnew_effect = Effect(\n    id=\"custom_effect_1\",\n    type=\"lighting\",\n    links=Links(apply=\"/api/v1/effects/custom_effect_1/apply\"),\n    attributes=Attributes(\n        name=\"My Custom Effect\",\n        description=\"A custom lighting effect\",\n        uses_audio=True\n    )\n)\n</code></pre> <p>For more detailed usage examples, please refer to the Python Library Usage guide.</p>"},{"location":"usage/cli/","title":"Command-Line Interface (CLI) Usage","text":"<p>signalrgb-python provides a user-friendly command-line interface for interacting with your SignalRGB setup. This guide covers the basic usage of the CLI.</p>"},{"location":"usage/cli/#basic-syntax","title":"Basic Syntax","text":"<p>The basic syntax for using the SignalRGB CLI is:</p> <pre><code>signalrgb [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>You can always use the <code>--help</code> option to get more information about available commands and options:</p> <pre><code>signalrgb --help\n</code></pre>"},{"location":"usage/cli/#available-commands","title":"Available Commands","text":""},{"location":"usage/cli/#list-effects","title":"List Effects","text":"<p>To list all available lighting effects:</p> <pre><code>signalrgb list-effects\n</code></pre>"},{"location":"usage/cli/#get-effect-details","title":"Get Effect Details","text":"<p>To get detailed information about a specific effect:</p> <pre><code>signalrgb get-effect \"Effect Name\"\n</code></pre> <p>Replace \"Effect Name\" with the name of the effect you want to inspect.</p>"},{"location":"usage/cli/#apply-an-effect","title":"Apply an Effect","text":"<p>To apply a specific effect:</p> <pre><code>signalrgb apply-effect \"Effect Name\"\n</code></pre>"},{"location":"usage/cli/#get-current-effect","title":"Get Current Effect","text":"<p>To see which effect is currently active:</p> <pre><code>signalrgb current-effect\n</code></pre>"},{"location":"usage/cli/#global-options","title":"Global Options","text":"<p>You can specify a custom host and port for all commands:</p> <pre><code>signalrgb --host my-pc.local --port 16038 list-effects\n</code></pre>"},{"location":"usage/cli/#examples","title":"Examples","text":"<p>Here are some example use cases:</p> <ol> <li>List all effects and pipe the output to <code>grep</code> to find a specific effect:</li> </ol> <pre><code>signalrgb list-effects | grep \"Electric Space\"\n</code></pre> <ol> <li>Apply the \"Rave Visualizer\" effect:</li> </ol> <pre><code>signalrgb apply-effect \"Rave Visualizer\"\n</code></pre> <ol> <li>Get details of the current effect and save it to a file:</li> </ol> <pre><code>signalrgb current-effect &gt; current_effect.txt\n</code></pre> <p>Remember to refer to the <code>--help</code> option for each command to see all available options and arguments.</p>"},{"location":"usage/library/","title":"Python Library Usage","text":"<p>signalrgb-python can be easily integrated into your Python projects. This guide covers the basic usage of the library.</p>"},{"location":"usage/library/#initializing-the-client","title":"Initializing the Client","text":"<p>First, import the <code>SignalRGBClient</code> class and create an instance:</p> <pre><code>from signalrgb import SignalRGBClient\n\nclient = SignalRGBClient(host=\"localhost\", port=16038)\n</code></pre> <p>You can specify a custom host and port if your SignalRGB instance is not running on the default location.</p>"},{"location":"usage/library/#listing-effects","title":"Listing Effects","text":"<p>To get a list of all available effects:</p> <pre><code>effects = client.get_effects()\nfor effect in effects:\n    print(f\"Effect: {effect.attributes.name}\")\n</code></pre>"},{"location":"usage/library/#getting-effect-details","title":"Getting Effect Details","text":"<p>To get detailed information about a specific effect:</p> <pre><code>effect = client.get_effect_by_name(\"Rain\")\nprint(f\"Effect Name: {effect.attributes.name}\")\nprint(f\"Description: {effect.attributes.description}\")\nprint(f\"Uses Audio: {effect.attributes.uses_audio}\")\n</code></pre>"},{"location":"usage/library/#applying-an-effect","title":"Applying an Effect","text":"<p>To apply a specific effect:</p> <pre><code>client.apply_effect_by_name(\"Rainbow Wave\")\n</code></pre>"},{"location":"usage/library/#getting-the-current-effect","title":"Getting the Current Effect","text":"<p>To see which effect is currently active:</p> <pre><code>current_effect = client.get_current_effect()\nprint(f\"Current Effect: {current_effect.attributes.name}\")\n</code></pre>"},{"location":"usage/library/#error-handling","title":"Error Handling","text":"<p>The client provides custom exceptions for different types of errors. You can handle these exceptions to provide better error messages or implement retry logic:</p> <pre><code>from signalrgb import SignalRGBClient, ConnectionError, APIError, EffectNotFoundError\n\nclient = SignalRGBClient()\n\ntry:\n    client.apply_effect_by_name(\"Non-existent Effect\")\nexcept ConnectionError as e:\n    print(f\"Connection failed: {e}\")\nexcept EffectNotFoundError as e:\n    print(f\"Effect not found: {e}\")\nexcept APIError as e:\n    print(f\"API error occurred: {e}\")\n</code></pre>"},{"location":"usage/library/#advanced-usage","title":"Advanced Usage","text":""},{"location":"usage/library/#refreshing-effects-cache","title":"Refreshing Effects Cache","text":"<p>The client caches the list of effects for performance. If you need to refresh this cache:</p> <pre><code>client.refresh_effects()\n</code></pre>"},{"location":"usage/library/#working-with-effect-parameters","title":"Working with Effect Parameters","text":"<p>Some effects have parameters that can be adjusted. You can access these parameters like this:</p> <pre><code>effect = client.get_effect_by_name(\"Falling Stars\")\nparameters = effect.attributes.parameters\nprint(f\"Effect Parameters: {parameters}\")\n</code></pre> <p>Note that the structure of parameters can vary between effects. Always check the specific effect's documentation or inspect the parameters dictionary to understand what options are available.</p> <p>Remember to handle exceptions and implement proper error checking in your production code to ensure robustness and good user experience.</p>"}]}