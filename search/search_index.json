{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"signalrgb-python","text":"<p>Welcome to the documentation for signalrgb-python. This library provides a powerful and easy-to-use interface for controlling SignalRGB Pro through both a command-line interface (CLI) and a Python library.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>\ud83d\udccb List available lighting effects and presets</li> <li>\ud83d\udd0d Get detailed information about specific effects</li> <li>\ud83c\udfa8 Apply effects and presets to your devices with ease</li> <li>\ud83d\uddbc\ufe0f Manage and switch between different layouts</li> <li>\ud83d\udd06 Control brightness levels</li> <li>\ud83d\udd0c Enable or disable the canvas</li> <li>\ud83d\udda5\ufe0f User-friendly command-line interface with intuitive subcommands</li> <li>\ud83d\udc0d Python client library for seamless integration into your projects</li> <li>\ud83d\udd10 Error handling and connection management</li> <li>\ud83d\udd04 Automatic effect caching for improved performance</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Install signalrgb-python:</p> <pre><code>pip install signalrgb\n</code></pre> <p>Use the CLI to list available effects:</p> <pre><code>signalrgb effect list\n</code></pre> <p>Or use the Python library in your code:</p> <pre><code>from signalrgb.client import SignalRGBClient\n\nclient = SignalRGBClient()\neffects = client.get_effects()\nfor effect in effects:\n    print(f\"Effect: {effect.attributes.name}\")\n\n# Control brightness\nclient.brightness = 75\nprint(f\"Current brightness: {client.brightness}\")\n\n# Enable/disable the canvas\nclient.enabled = True\nprint(f\"Canvas enabled: {client.enabled}\")\n\n# List and apply presets\ncurrent_effect = client.get_current_effect()\npresets = client.get_effect_presets(current_effect.id)\nfor preset in presets:\n    print(f\"Preset: {preset.id}\")\nclient.apply_effect_preset(current_effect.id, presets[0].id)\n\n# Manage layouts\nlayouts = client.get_layouts()\nfor layout in layouts:\n    print(f\"Layout: {layout.id}\")\nclient.current_layout = layouts[0].id\n</code></pre> <p>For more detailed information, check out the Installation and Usage guides.</p>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#what-should-i-know-before-i-get-started","title":"What should I know before I get started?","text":""},{"location":"contributing/#project-structure","title":"Project Structure","text":"<ul> <li><code>signalrgb/</code> - This directory contains the main source code for the project.</li> <li><code>tests/</code> - This directory contains all the tests.</li> <li><code>docs/</code> - This directory contains the project documentation.</li> <li><code>examples/</code> - This directory contains example scripts demonstrating how to use the library.</li> </ul>"},{"location":"contributing/#how-can-i-contribute","title":"How Can I Contribute?","text":""},{"location":"contributing/#reporting-bugs","title":"Reporting Bugs","text":"<p>This section guides you through submitting a bug report for signalrgb-python. Following these guidelines helps maintainers and the community understand your report, reproduce the behavior, and find related reports.</p> <ul> <li>Use a clear and descriptive title for the issue to identify the problem.</li> <li>Describe the exact steps which reproduce the problem in as many details as possible.</li> <li>Provide specific examples to demonstrate the steps.</li> <li>Describe the behavior you observed after following the steps and point out what exactly is the problem with that behavior.</li> <li>Explain which behavior you expected to see instead and why.</li> <li>Include screenshots and animated GIFs which show you following the described steps and clearly demonstrate the problem.</li> </ul>"},{"location":"contributing/#suggesting-enhancements","title":"Suggesting Enhancements","text":"<p>This section guides you through submitting an enhancement suggestion for signalrgb-python, including completely new features and minor improvements to existing functionality.</p> <ul> <li>Use a clear and descriptive title for the issue to identify the suggestion.</li> <li>Provide a step-by-step description of the suggested enhancement in as many details as possible.</li> <li>Provide specific examples to demonstrate the steps.</li> <li>Describe the current behavior and explain which behavior you expected to see instead and why.</li> <li>Explain why this enhancement would be useful to most signalrgb-python users.</li> <li>List some other text editors or applications where this enhancement exists.</li> </ul>"},{"location":"contributing/#your-first-code-contribution","title":"Your First Code Contribution","text":"<p>Unsure where to begin contributing to signalrgb-python? You can start by looking through these <code>beginner</code> and <code>help-wanted</code> issues:</p> <ul> <li>Beginner issues - issues which should only require a few lines of code, and a test or two.</li> <li>Help wanted issues - issues which should be a bit more involved than <code>beginner</code> issues.</li> </ul>"},{"location":"contributing/#pull-requests","title":"Pull Requests","text":"<ul> <li>Fill in the required template</li> <li>Do not include issue numbers in the PR title</li> <li>Follow the Python style guide</li> <li>Include thoughtfully-worded, well-structured tests in the <code>./tests</code> folder. Run them using <code>pytest</code>.</li> <li>Document new code based on the Documentation Styleguide</li> <li>End all files with a newline</li> </ul>"},{"location":"contributing/#styleguides","title":"Styleguides","text":""},{"location":"contributing/#git-commit-messages","title":"Git Commit Messages","text":"<ul> <li>Use the present tense (\"Add feature\" not \"Added feature\")</li> <li>Use the imperative mood (\"Move cursor to...\" not \"Moves cursor to...\")</li> <li>Limit the first line to 72 characters or less</li> <li>Reference issues and pull requests liberally after the first line</li> <li>Consider starting the commit message with an applicable emoji:<ul> <li>:art: <code>:art:</code> when improving the format/structure of the code</li> <li>:racehorse: <code>:racehorse:</code> when improving performance</li> <li>:non-potable_water: <code>:non-potable_water:</code> when plugging memory leaks</li> <li>:memo: <code>:memo:</code> when writing docs</li> <li>:penguin: <code>:penguin:</code> when fixing something on Linux</li> <li>:apple: <code>:apple:</code> when fixing something on macOS</li> <li>:checkered_flag: <code>:checkered_flag:</code> when fixing something on Windows</li> <li>:bug: <code>:bug:</code> when fixing a bug</li> <li>:fire: <code>:fire:</code> when removing code or files</li> <li>:green_heart: <code>:green_heart:</code> when fixing the CI build</li> <li>:white_check_mark: <code>:white_check_mark:</code> when adding tests</li> <li>:lock: <code>:lock:</code> when dealing with security</li> <li>:arrow_up: <code>:arrow_up:</code> when upgrading dependencies</li> <li>:arrow_down: <code>:arrow_down:</code> when downgrading dependencies</li> <li>:shirt: <code>:shirt:</code> when removing linter warnings</li> </ul> </li> </ul>"},{"location":"contributing/#python-styleguide","title":"Python Styleguide","text":"<p>All Python code must adhere to PEP 8.</p>"},{"location":"contributing/#documentation-styleguide","title":"Documentation Styleguide","text":"<ul> <li>Use Markdown.</li> <li>Use Google-style docstrings for Python code.</li> </ul>"},{"location":"contributing/#additional-notes","title":"Additional Notes","text":""},{"location":"contributing/#issue-and-pull-request-labels","title":"Issue and Pull Request Labels","text":"<p>This section lists the labels we use to help us track and manage issues and pull requests.</p> <p>GitHub search makes it easy to use labels for finding groups of issues or pull requests you're interested in.</p>"},{"location":"contributing/#type-of-issue-and-issue-state","title":"Type of Issue and Issue State","text":"<ul> <li><code>bug</code> - Issues that are bugs.</li> <li><code>enhancement</code> - Issues that are feature requests.</li> <li><code>question</code> - Issues that are questions.</li> <li><code>duplicate</code> - Issues that are duplicates of other issues.</li> <li><code>good first issue</code> - Issues that are good for newcomers.</li> <li><code>help wanted</code> - Issues that need assistance from the community.</li> </ul>"},{"location":"contributing/#topic-categories","title":"Topic Categories","text":"<ul> <li><code>documentation</code> - Issues related to documentation.</li> <li><code>performance</code> - Issues related to performance.</li> <li><code>security</code> - Issues related to security.</li> </ul>"},{"location":"contributing/#pull-request-labels","title":"Pull Request Labels","text":"<ul> <li><code>work-in-progress</code> - Pull requests that are still being worked on, more changes will follow.</li> <li><code>needs-review</code> - Pull requests that need code review and approval from maintainers.</li> <li><code>under-review</code> - Pull requests being reviewed by maintainers.</li> <li><code>requires-changes</code> - Pull requests that need to be updated based on review comments and then reviewed again.</li> <li><code>needs-testing</code> - Pull requests that need manual testing.</li> </ul> <p>Thank you for your contributions to signalrgb-python!</p>"},{"location":"development/","title":"Development Guide","text":"<p>This guide will help you set up your development environment for contributing to signalrgb-python.</p>"},{"location":"development/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following installed on your system:</p> <ul> <li>Python 3.9 or higher</li> <li>UV for dependency management</li> <li>Git for version control</li> </ul>"},{"location":"development/#setting-up-the-development-environment","title":"Setting Up the Development Environment","text":"<ol> <li> <p>Clone the repository:    <pre><code>git clone https://github.com/hyperb1iss/signalrgb-python.git\ncd signalrgb-python\n</code></pre></p> </li> <li> <p>Install the project dependencies using UV:    <pre><code>uv sync --groups dev\n</code></pre></p> </li> <li> <p>To run commands in the development environment:    <pre><code>uv run [command]\n</code></pre></p> </li> </ol> <p>For example, to run a Python script:    <pre><code>uv run python scripts/some_script.py\n</code></pre></p>"},{"location":"development/#running-tests","title":"Running Tests","text":"<p>We use pytest for our test suite. To run the tests:</p> <pre><code>uv run pytest\n</code></pre> <p>To run tests with coverage report:</p> <pre><code>uv run pytest --cov=signalrgb --cov-report=term-missing\n</code></pre>"},{"location":"development/#linting","title":"Linting","text":"<p>We use Ruff for linting and formatting. To run the linter:</p> <pre><code>uv run ruff check .\n</code></pre> <p>To automatically fix linting issues:</p> <pre><code>uv run ruff check --fix .\n</code></pre>"},{"location":"development/#type-checking","title":"Type Checking","text":"<p>We use mypy for static type checking. To run the type checker:</p> <pre><code>uv run mypy signalrgb\n</code></pre>"},{"location":"development/#pre-commit-hooks","title":"Pre-commit Hooks","text":"<p>We use pre-commit hooks to ensure code quality before committing. To set up pre-commit hooks:</p> <ol> <li> <p>Install pre-commit:    <pre><code>uv run pre-commit install\n</code></pre></p> </li> <li> <p>Run pre-commit on all files:    <pre><code>uv run pre-commit run --all-files\n</code></pre></p> </li> </ol> <p>The pre-commit hooks will now run automatically on <code>git commit</code>.</p>"},{"location":"development/#building-documentation","title":"Building Documentation","text":"<p>To build the documentation locally:</p> <ol> <li> <p>Make sure you've installed the development dependencies:    <pre><code>uv sync --groups dev\n</code></pre></p> </li> <li> <p>Build and serve the documentation:    <pre><code>uv run mkdocs serve\n</code></pre></p> </li> <li> <p>Open your browser and navigate to <code>http://127.0.0.1:8000/</code> to view the documentation.</p> </li> </ol>"},{"location":"development/#creating-a-new-release","title":"Creating a New Release","text":"<ol> <li> <p>Update the version number in <code>pyproject.toml</code>:    <pre><code># Edit manually or use a version update script\n</code></pre></p> </li> <li> <p>Update the <code>CHANGELOG.md</code> file with the changes for the new version.</p> </li> <li> <p>Commit the changes:    <pre><code>git add pyproject.toml CHANGELOG.md\ngit commit -m \"Bump version to x.y.z\"\n</code></pre></p> </li> <li> <p>Create a new tag:    <pre><code>git tag -a vx.y.z -m \"Release version x.y.z\"\n</code></pre></p> </li> <li> <p>Push the changes and the new tag:    <pre><code>git push origin main --tags\n</code></pre></p> </li> </ol> <p>The CI/CD pipeline will handle the rest, including building and publishing the package to PyPI and deploying the updated documentation.</p>"},{"location":"development/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter any issues during development, please check the following:</p> <ol> <li>Ensure you're using the correct version of Python (3.9+).</li> <li>Make sure all dependencies are up to date (<code>uv sync</code>).</li> <li>Clear any cached files: <code>find . -name '*.pyc' -delete</code> and <code>find . -name '__pycache__' -type d -delete</code></li> </ol> <p>If you're still having problems, please open an issue on the GitHub repository with a detailed description of the problem and steps to reproduce it.</p>"},{"location":"development/#getting-help","title":"Getting Help","text":"<p>If you need help with development, you can:</p> <ol> <li>Open an issue on the GitHub repository.</li> <li>Reach out to the maintainers directly (contact information can be found in the <code>README.md</code> file).</li> </ol>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<p>Before installing signalrgb-python, ensure you have the following:</p> <ul> <li>Python 3.9 or higher</li> <li>SignalRGB Pro (required for API access)</li> </ul> <p>This library uses the SignalRGB REST API, which is only available in SignalRGB Pro.</p>"},{"location":"installation/#installing-with-pip","title":"Installing with pip","text":"<p>The easiest way to install signalrgb-python is using pip:</p> <pre><code>pip install signalrgb\n</code></pre>"},{"location":"installation/#installing-with-uv","title":"Installing with UV","text":"<p>For faster, more reliable dependency resolution, you can use UV to install signalrgb-python:</p> <pre><code># Install UV if you don't have it already\npip install uv\n\n# Install signalrgb using UV\nuv pip install signalrgb\n</code></pre>"},{"location":"installation/#development-installation","title":"Development Installation","text":"<p>If you're working on signalrgb-python development, you can install it with development dependencies:</p> <pre><code># Clone the repository\ngit clone https://github.com/hyperb1iss/signalrgb-python.git\ncd signalrgb-python\n\n# Using UV\nuv sync --groups dev\n</code></pre>"},{"location":"installation/#verifying-the-installation","title":"Verifying the Installation","text":"<p>After installation, you can verify that signalrgb-python is correctly installed by running:</p> <pre><code>signalrgb --version\n</code></pre> <p>This should display the version number of the installed client.</p>"},{"location":"installation/#next-steps","title":"Next Steps","text":"<p>Now that you have installed signalrgb-python, you can start using it. Check out the CLI Usage guide to learn how to use the command-line interface, or the Python Library Usage guide to learn how to integrate it into your Python projects.</p>"},{"location":"api/client/","title":"SignalRGB Client API Reference","text":"<p>This page provides detailed API documentation for the <code>SignalRGBClient</code> class, which is the main interface for interacting with the SignalRGB API.</p>"},{"location":"api/client/#signalrgbclient","title":"SignalRGBClient","text":""},{"location":"api/client/#signalrgb.client.SignalRGBClient","title":"<code>signalrgb.client.SignalRGBClient</code>","text":"<p>Client for interacting with the SignalRGB API.</p> <p>This class provides methods to interact with the SignalRGB API, allowing users to retrieve, apply, and manage lighting effects and layouts.</p> Source code in <code>signalrgb/client.py</code> <pre><code>class SignalRGBClient:\n    \"\"\"Client for interacting with the SignalRGB API.\n\n    This class provides methods to interact with the SignalRGB API, allowing users\n    to retrieve, apply, and manage lighting effects and layouts.\n    \"\"\"\n\n    def __init__(self, host: str = \"localhost\", port: int = DEFAULT_PORT, timeout: float = 10.0):\n        \"\"\"Initialize the SignalRGBClient.\n\n        Args:\n            host: The host of the SignalRGB API. Defaults to 'localhost'.\n            port: The port of the SignalRGB API. Defaults to DEFAULT_PORT.\n            timeout: The timeout for API requests in seconds. Defaults to 10.0.\n\n        Example:\n            &gt;&gt;&gt; client = SignalRGBClient()\n            &gt;&gt;&gt; client = SignalRGBClient(\"192.168.1.100\", 8080, 5.0)\n        \"\"\"\n        self._base_url = f\"http://{host}:{port}\"\n        self._session = requests.Session()\n        self._timeout = timeout\n        self._effects_cache: list[Effect] | None = None\n\n    @contextmanager\n    def _request_context(self, method: str, endpoint: str, **kwargs: Any) -&gt; Iterator[dict[str, Any]]:\n        \"\"\"Context manager for making API requests.\n\n        This method handles common exception cases and debug logging.\n\n        Args:\n            method: The HTTP method to use for the request.\n            endpoint: The API endpoint to request.\n            **kwargs: Additional arguments to pass to the request.\n\n        Yields:\n            The JSON response from the API.\n\n        Raises:\n            ConnectionError: If there's a connection error.\n            APIError: If there's an API error.\n            SignalRGBError: For any other unexpected errors.\n        \"\"\"\n        url = f\"{self._base_url}{endpoint}\"\n        debug = os.getenv(\"SIGNALRGB_DEBUG\", \"0\") == \"1\"\n\n        if debug:\n            pass\n\n        try:\n            response = self._session.request(method, url, timeout=self._timeout, **kwargs)\n            response.raise_for_status()\n\n            if debug:\n                pass\n\n            yield response.json()\n        except requests.ConnectionError as e:\n            raise ConnectionError(f\"Failed to connect to SignalRGB API: {e}\", Error(title=str(e))) from e\n        except Timeout as e:\n            raise ConnectionError(\"Request timed out\", Error(title=\"Request Timeout\")) from e\n        except requests.HTTPError as e:\n            if e.response is not None:\n                error_data = e.response.json().get(\"errors\", [{}])[0]\n                error = Error.from_dict(error_data)\n                raise APIError(f\"HTTP error occurred: {e}\", error) from e\n            raise APIError(f\"HTTP error occurred: {e}\", Error(title=str(e))) from e\n        except RequestException as e:\n            raise APIError(f\"An error occurred while making the request: {e}\", Error(title=str(e))) from e\n        except (ValueError, TypeError) as e:\n            # More specific exceptions instead of catching generic Exception\n            raise SignalRGBError(f\"An unexpected error occurred: {e}\") from e\n\n    # Using a standard method with cached property pattern instead of lru_cache on method\n    def _get_effects_cached(self) -&gt; list[Effect]:\n        \"\"\"Internal method to get effects with caching.\"\"\"\n        if self._effects_cache is None:\n            with self._request_context(\"GET\", f\"{LIGHTING_V1}/effects\") as data:\n                response = EffectListResponse.from_dict(data)\n                self._ensure_response_ok(response)\n                effects = response.data\n                if effects is None or effects.items is None:\n                    raise APIError(\"No effects data in the response\")\n                self._effects_cache = effects.items\n        return self._effects_cache\n\n    def get_effects(self) -&gt; list[Effect]:\n        \"\"\"List available effects.\n\n        Returns:\n            List[Effect]: A list of available effects.\n\n        Raises:\n            ConnectionError: If there's a connection error.\n            APIError: If there's an error retrieving the effects.\n            SignalRGBError: For any other unexpected errors.\n\n        Example:\n            &gt;&gt;&gt; client = SignalRGBClient()\n            &gt;&gt;&gt; effects = client.get_effects()\n            &gt;&gt;&gt; print(f\"Found {len(effects)} effects\")\n        \"\"\"\n        return self._get_effects_cached()\n\n    def get_effect(self, effect_id: str) -&gt; Effect:\n        \"\"\"Get details of a specific effect.\n\n        Args:\n            effect_id (str): The ID of the effect to retrieve.\n\n        Returns:\n            Effect: The requested effect.\n\n        Raises:\n            NotFoundError: If the effect with the given ID is not found.\n            ConnectionError: If there's a connection error.\n            APIError: If there's an API error.\n            SignalRGBError: For any other unexpected errors.\n\n        Example:\n            &gt;&gt;&gt; client = SignalRGBClient()\n            &gt;&gt;&gt; effect = client.get_effect(\"example_effect_id\")\n            &gt;&gt;&gt; print(f\"Effect name: {effect.attributes.name}\")\n        \"\"\"\n        try:\n            with self._request_context(\"GET\", f\"{LIGHTING_V1}/effects/{effect_id}\") as data:\n                response = EffectDetailsResponse.from_dict(data)\n                self._ensure_response_ok(response)\n                if response.data is None:\n                    raise APIError(\"No effect data in the response\")\n                return response.data\n        except APIError as e:\n            if e.error and e.error.code == \"not_found\":\n                raise NotFoundError(f\"Effect with ID '{effect_id}' not found\", e.error) from e\n            raise\n\n    def get_effect_by_name(self, effect_name: str) -&gt; Effect:\n        \"\"\"Get details of a specific effect by name.\n\n        Args:\n            effect_name: The name of the effect to retrieve.\n\n        Returns:\n            Effect: The requested effect.\n\n        Raises:\n            NotFoundError: If the effect with the given name is not found.\n            ConnectionError: If there's a connection error.\n            APIError: If there's an API error.\n            SignalRGBError: For any other unexpected errors.\n\n        Example:\n            &gt;&gt;&gt; client = SignalRGBClient()\n            &gt;&gt;&gt; effect = client.get_effect_by_name(\"Rainbow Wave\")\n            &gt;&gt;&gt; print(f\"Effect ID: {effect.id}\")\n        \"\"\"\n        effect = next(\n            (e for e in self.get_effects() if e.attributes.name == effect_name),\n            None,\n        )\n        if effect is None:\n            raise NotFoundError(f\"Effect '{effect_name}' not found\")\n        return self.get_effect(effect.id)\n\n    @property\n    def current_effect(self) -&gt; Effect:\n        \"\"\"Get the current effect.\n\n        Returns:\n            Effect: The currently active effect.\n\n        Raises:\n            APIError: If there's an error retrieving the current effect.\n        \"\"\"\n        return self.get_current_effect()\n\n    def get_current_effect(self) -&gt; Effect:\n        \"\"\"Get the current effect.\n\n        Returns:\n            Effect: The currently active effect.\n\n        Raises:\n            ConnectionError: If there's a connection error.\n            APIError: If there's an API error.\n            SignalRGBError: For any other unexpected errors.\n\n        Example:\n            &gt;&gt;&gt; client = SignalRGBClient()\n            &gt;&gt;&gt; current_effect = client.get_current_effect()\n            &gt;&gt;&gt; print(f\"Current effect: {current_effect.attributes.name}\")\n        \"\"\"\n        state = self._get_current_state()\n        if state.attributes is None:\n            raise APIError(\"No current effect data in the response\")\n        return self.get_effect(state.id)\n\n    def _get_current_state(self) -&gt; CurrentStateHolder:\n        \"\"\"Get the current state of the SignalRGB instance.\n\n        Returns:\n            CurrentStateHolder: The current state of the SignalRGB instance.\n\n        Raises:\n            ConnectionError: If there's a connection error.\n            APIError: If there's an API error.\n            SignalRGBError: For any other unexpected errors.\n        \"\"\"\n        with self._request_context(\"GET\", LIGHTING_V1) as data:\n            response = CurrentStateResponse.from_dict(data)\n            self._ensure_response_ok(response)\n            if response.data is None:\n                raise APIError(\"No current state data in the response\")\n            return response.data\n\n    @property\n    def brightness(self) -&gt; int:\n        \"\"\"Get or set the current brightness level.\n\n        Returns:\n            int: The current brightness level (0-100).\n\n        Raises:\n            ConnectionError: If there's a connection error.\n            APIError: If there's an API error.\n            SignalRGBError: For any other unexpected errors.\n\n        Example:\n            &gt;&gt;&gt; client = SignalRGBClient()\n            &gt;&gt;&gt; print(f\"Current brightness: {client.brightness}\")\n            &gt;&gt;&gt; client.brightness = 75\n            &gt;&gt;&gt; print(f\"New brightness: {client.brightness}\")\n        \"\"\"\n        return self._get_current_state().attributes.global_brightness\n\n    @brightness.setter\n    def brightness(self, value: int) -&gt; None:\n        with self._request_context(\n            \"PATCH\",\n            f\"{LIGHTING_V1}/global_brightness\",\n            json={\"global_brightness\": value},\n        ):\n            pass\n\n    @property\n    def enabled(self) -&gt; bool:\n        \"\"\"Get or set the current enabled state of the canvas.\n\n        Returns:\n            bool: The current enabled state.\n\n        Raises:\n            ConnectionError: If there's a connection error.\n            APIError: If there's an API error.\n            SignalRGBError: For any other unexpected errors.\n\n        Example:\n            &gt;&gt;&gt; client = SignalRGBClient()\n            &gt;&gt;&gt; print(f\"Canvas enabled: {client.enabled}\")\n            &gt;&gt;&gt; client.enabled = False\n            &gt;&gt;&gt; print(f\"Canvas now disabled: {not client.enabled}\")\n        \"\"\"\n        return self._get_current_state().attributes.enabled\n\n    @enabled.setter\n    def enabled(self, value: bool) -&gt; None:\n        with self._request_context(\"PATCH\", f\"{LIGHTING_V1}/enabled\", json={\"enabled\": value}):\n            pass\n\n    def apply_effect(self, effect_id: str) -&gt; None:\n        \"\"\"Apply an effect.\n\n        Args:\n            effect_id (str): The ID of the effect to apply.\n\n        Raises:\n            ConnectionError: If there's a connection error.\n            APIError: If there's an API error.\n            SignalRGBError: For any other unexpected errors.\n\n        Example:\n            &gt;&gt;&gt; client = SignalRGBClient()\n            &gt;&gt;&gt; client.apply_effect(\"example_effect_id\")\n            &gt;&gt;&gt; print(\"Effect applied successfully\")\n        \"\"\"\n        with self._request_context(\"POST\", f\"{LIGHTING_V1}/effects/{effect_id}/apply\") as data:\n            response = SignalRGBResponse.from_dict(data)\n            self._ensure_response_ok(response)\n\n    def apply_effect_by_name(self, effect_name: str) -&gt; None:\n        \"\"\"Apply an effect by name.\n\n        Args:\n            effect_name: The name of the effect to apply.\n\n        Raises:\n            NotFoundError: If the effect with the given name is not found.\n            ConnectionError: If there's a connection error.\n            APIError: If there's an API error.\n            SignalRGBError: For any other unexpected errors.\n\n        Example:\n            &gt;&gt;&gt; client = SignalRGBClient()\n            &gt;&gt;&gt; client.apply_effect_by_name(\"Rainbow Wave\")\n            &gt;&gt;&gt; print(\"Effect applied successfully\")\n        \"\"\"\n        effect = self.get_effect_by_name(effect_name)\n        apply_url = effect.links.apply\n        if apply_url is None:\n            # Fallback if apply link is missing\n            self.apply_effect(effect.id)\n        else:\n            with self._request_context(\"POST\", apply_url):\n                pass\n\n    def get_effect_presets(self, effect_id: str) -&gt; list[EffectPreset]:\n        \"\"\"Get presets for a specific effect.\n\n        Args:\n            effect_id (str): The ID of the effect to retrieve presets for.\n\n        Returns:\n            List[EffectPreset]: A list of effect presets.\n\n        Raises:\n            NotFoundError: If the effect with the given ID is not found.\n            ConnectionError: If there's a connection error.\n            APIError: If there's an API error.\n            SignalRGBError: For any other unexpected errors.\n\n        Example:\n            &gt;&gt;&gt; client = SignalRGBClient()\n            &gt;&gt;&gt; presets = client.get_effect_presets(\"example_effect_id\")\n            &gt;&gt;&gt; for preset in presets:\n            ...     print(f\"Preset ID: {preset.id}, Name: {preset.name}\")\n        \"\"\"\n        try:\n            with self._request_context(\"GET\", f\"{LIGHTING_V1}/effects/{effect_id}/presets\") as data:\n                response = EffectPresetListResponse.from_dict(data)\n                self._ensure_response_ok(response)\n                if response.data is None:\n                    raise APIError(\"No preset data in the response\")\n                return response.data.items\n        except APIError as e:\n            if e.error and e.error.code == \"not_found\":\n                raise NotFoundError(f\"Effect with ID '{effect_id}' not found\", e.error) from e\n            raise\n\n    def apply_effect_preset(self, effect_id: str, preset_id: str) -&gt; None:\n        \"\"\"Apply a preset for a specific effect.\n\n        Args:\n            effect_id (str): The ID of the effect to apply the preset to.\n            preset_id (str): The ID of the preset to apply.\n\n        Raises:\n            NotFoundError: If the effect with the given ID is not found.\n            ConnectionError: If there's a connection error.\n            APIError: If there's an API error.\n            SignalRGBError: For any other unexpected errors.\n\n        Example:\n            &gt;&gt;&gt; client = SignalRGBClient()\n            &gt;&gt;&gt; client.apply_effect_preset(\"example_effect_id\", \"My Fancy Preset 1\")\n            &gt;&gt;&gt; print(\"Preset applied successfully\")\n        \"\"\"\n        try:\n            with self._request_context(\n                \"PATCH\",\n                f\"{LIGHTING_V1}/effects/{effect_id}/presets\",\n                json={\"preset\": preset_id},\n            ) as data:\n                response = EffectPresetResponse.from_dict(data)\n                self._ensure_response_ok(response)\n        except APIError as e:\n            if e.error and e.error.code == \"not_found\":\n                raise NotFoundError(\n                    f\"Effect with ID '{effect_id}' or preset '{preset_id}' not found\",\n                    e.error,\n                ) from e\n            raise\n\n    def get_next_effect(self) -&gt; Effect | None:\n        \"\"\"Get information about the next effect in history.\n\n        Returns:\n            Optional[Effect]: The next effect if available, None otherwise.\n\n        Raises:\n            ConnectionError: If there's a connection error.\n            APIError: If there's an API error.\n            SignalRGBError: For any other unexpected errors.\n\n        Example:\n            &gt;&gt;&gt; client = SignalRGBClient()\n            &gt;&gt;&gt; next_effect = client.get_next_effect()\n            &gt;&gt;&gt; if next_effect:\n            ...     print(f\"Next effect: {next_effect.attributes.name}\")\n            ... else:\n            ...     print(\"No next effect available\")\n        \"\"\"\n        try:\n            with self._request_context(\"GET\", f\"{LIGHTING_V1}/next\") as data:\n                response = EffectDetailsResponse.from_dict(data)\n                self._ensure_response_ok(response)\n                return response.data\n        except APIError as e:\n            if e.error and e.error.code == \"409\":\n                return None\n            raise\n\n    def apply_next_effect(self) -&gt; Effect:\n        \"\"\"Apply the next effect in history or a random effect if there's no next effect.\n\n        Returns:\n            Effect: The newly applied effect.\n\n        Raises:\n            ConnectionError: If there's a connection error.\n            APIError: If there's an API error.\n            SignalRGBError: For any other unexpected errors.\n\n        Example:\n            &gt;&gt;&gt; client = SignalRGBClient()\n            &gt;&gt;&gt; new_effect = client.apply_next_effect()\n            &gt;&gt;&gt; print(f\"Applied effect: {new_effect.attributes.name}\")\n        \"\"\"\n        with self._request_context(\"POST\", f\"{LIGHTING_V1}/next\") as data:\n            response = EffectDetailsResponse.from_dict(data)\n            self._ensure_response_ok(response)\n            if response.data is None:\n                raise APIError(\"No effect data in the response\")\n            return response.data\n\n    def get_previous_effect(self) -&gt; Effect | None:\n        \"\"\"Get information about the previous effect in history.\n\n        Returns:\n            Optional[Effect]: The previous effect if available, None otherwise.\n\n        Raises:\n            ConnectionError: If there's a connection error.\n            APIError: If there's an API error.\n            SignalRGBError: For any other unexpected errors.\n\n        Example:\n            &gt;&gt;&gt; client = SignalRGBClient()\n            &gt;&gt;&gt; prev_effect = client.get_previous_effect()\n            &gt;&gt;&gt; if prev_effect:\n            ...     print(f\"Previous effect: {prev_effect.attributes.name}\")\n            ... else:\n            ...     print(\"No previous effect available\")\n        \"\"\"\n        try:\n            with self._request_context(\"GET\", f\"{LIGHTING_V1}/previous\") as data:\n                response = EffectDetailsResponse.from_dict(data)\n                self._ensure_response_ok(response)\n                return response.data\n        except APIError as e:\n            if e.error and e.error.code == \"409\":\n                return None\n            raise\n\n    def apply_previous_effect(self) -&gt; Effect:\n        \"\"\"Apply the previous effect in history.\n\n        Returns:\n            Effect: The newly applied effect.\n\n        Raises:\n            ConnectionError: If there's a connection error.\n            APIError: If there's an API error.\n            SignalRGBError: For any other unexpected errors.\n\n        Example:\n            &gt;&gt;&gt; client = SignalRGBClient()\n            &gt;&gt;&gt; new_effect = client.apply_previous_effect()\n            &gt;&gt;&gt; print(f\"Applied effect: {new_effect.attributes.name}\")\n        \"\"\"\n        with self._request_context(\"POST\", f\"{LIGHTING_V1}/previous\") as data:\n            response = EffectDetailsResponse.from_dict(data)\n            self._ensure_response_ok(response)\n            if response.data is None:\n                raise APIError(\"No effect data in the response\")\n            return response.data\n\n    def apply_random_effect(self) -&gt; Effect:\n        \"\"\"Apply a random effect.\n\n        Returns:\n            Effect: The newly applied random effect.\n\n        Raises:\n            ConnectionError: If there's a connection error.\n            APIError: If there's an API error.\n            SignalRGBError: For any other unexpected errors.\n\n        Example:\n            &gt;&gt;&gt; client = SignalRGBClient()\n            &gt;&gt;&gt; random_effect = client.apply_random_effect()\n            &gt;&gt;&gt; print(f\"Applied random effect: {random_effect.attributes.name}\")\n        \"\"\"\n        with self._request_context(\"POST\", f\"{LIGHTING_V1}/shuffle\") as data:\n            response = EffectDetailsResponse.from_dict(data)\n            self._ensure_response_ok(response)\n            if response.data is None:\n                raise APIError(\"No effect data in the response\")\n            return response.data\n\n    @property\n    def current_layout(self) -&gt; Layout:\n        \"\"\"Get the current layout.\n\n        Returns:\n            Layout: The currently active layout.\n\n        Raises:\n            ConnectionError: If there's a connection error.\n            APIError: If there's an API error.\n            SignalRGBError: For any other unexpected errors.\n\n        Example:\n            &gt;&gt;&gt; client = SignalRGBClient()\n            &gt;&gt;&gt; current_layout = client.current_layout\n            &gt;&gt;&gt; print(f\"Current layout: {current_layout.id}\")\n        \"\"\"\n        with self._request_context(\"GET\", f\"{SCENES_V1}/current_layout\") as data:\n            response = CurrentLayoutResponse.from_dict(data)\n            self._ensure_response_ok(response)\n            if response.data is None or response.data.current_layout is None:\n                raise APIError(\"No current layout data in the response\")\n            return response.data.current_layout\n\n    @current_layout.setter\n    def current_layout(self, layout_id: str) -&gt; None:\n        \"\"\"Set the current layout.\n\n        Args:\n            layout_id: The ID of the layout to set as current.\n\n        Raises:\n            ConnectionError: If there's a connection error.\n            APIError: If there's an API error.\n            SignalRGBError: For any other unexpected errors.\n\n        Example:\n            &gt;&gt;&gt; client = SignalRGBClient()\n            &gt;&gt;&gt; client.current_layout = \"My Layout 1\"\n            &gt;&gt;&gt; print(f\"New current layout: {client.current_layout.id}\")\n        \"\"\"\n        with self._request_context(\"PATCH\", f\"{SCENES_V1}/current_layout\", json={\"layout\": layout_id}) as data:\n            response = CurrentLayoutResponse.from_dict(data)\n            self._ensure_response_ok(response)\n            if response.data is None or response.data.current_layout is None:\n                raise APIError(\"No current layout data in the response\")\n            if response.data.current_layout.id != layout_id:\n                raise APIError(f\"Failed to set layout to '{layout_id}'\")\n\n    def get_layouts(self) -&gt; list[Layout]:\n        \"\"\"Get all available layouts.\n\n        Returns:\n            List[Layout]: A list of all available layouts.\n\n        Raises:\n            ConnectionError: If there's a connection error.\n            APIError: If there's an API error.\n            SignalRGBError: For any other unexpected errors.\n\n        Example:\n            &gt;&gt;&gt; client = SignalRGBClient()\n            &gt;&gt;&gt; layouts = client.get_layouts()\n            &gt;&gt;&gt; for layout in layouts:\n            ...     print(f\"Layout: {layout.id}\")\n        \"\"\"\n        with self._request_context(\"GET\", f\"{SCENES_V1}/layouts\") as data:\n            response = LayoutListResponse.from_dict(data)\n            self._ensure_response_ok(response)\n            if \"data\" not in data or \"items\" not in data[\"data\"]:\n                raise APIError(\"No layouts data in the response\")\n            return [Layout.from_dict(item) for item in data[\"data\"][\"items\"]]\n\n    @staticmethod\n    def _ensure_response_ok(response: SignalRGBResponse) -&gt; None:\n        \"\"\"Ensure the response status is 'ok'.\n\n        Args:\n            response: The response to check.\n\n        Raises:\n            APIError: If the response status is not 'ok'.\n        \"\"\"\n        if response.status != \"ok\":\n            error = response.errors[0] if response.errors else None\n            raise APIError(f\"API returned non-OK status: {response.status}\", error)\n\n    def refresh_effects(self) -&gt; None:\n        \"\"\"Refresh the cached effects.\n\n        This method clears the cache for the get_effects method, forcing a fresh\n        retrieval of effects on the next call.\n\n        Example:\n            &gt;&gt;&gt; client = SignalRGBClient()\n            &gt;&gt;&gt; client.refresh_effects()\n            &gt;&gt;&gt; fresh_effects = client.get_effects()\n        \"\"\"\n        self._effects_cache = None\n\n    def __repr__(self) -&gt; str:\n        return f\"SignalRGBClient(base_url='{self._base_url}')\"\n</code></pre>"},{"location":"api/client/#signalrgb.client.SignalRGBClient.brightness","title":"<code>brightness</code>  <code>property</code> <code>writable</code>","text":"<p>Get or set the current brightness level.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The current brightness level (0-100).</p> <p>Raises:</p> Type Description <code>ConnectionError</code> <p>If there's a connection error.</p> <code>APIError</code> <p>If there's an API error.</p> <code>SignalRGBError</code> <p>For any other unexpected errors.</p> Example <p>client = SignalRGBClient() print(f\"Current brightness: {client.brightness}\") client.brightness = 75 print(f\"New brightness: {client.brightness}\")</p>"},{"location":"api/client/#signalrgb.client.SignalRGBClient.current_effect","title":"<code>current_effect</code>  <code>property</code>","text":"<p>Get the current effect.</p> <p>Returns:</p> Name Type Description <code>Effect</code> <code>Effect</code> <p>The currently active effect.</p> <p>Raises:</p> Type Description <code>APIError</code> <p>If there's an error retrieving the current effect.</p>"},{"location":"api/client/#signalrgb.client.SignalRGBClient.current_layout","title":"<code>current_layout</code>  <code>property</code> <code>writable</code>","text":"<p>Get the current layout.</p> <p>Returns:</p> Name Type Description <code>Layout</code> <code>Layout</code> <p>The currently active layout.</p> <p>Raises:</p> Type Description <code>ConnectionError</code> <p>If there's a connection error.</p> <code>APIError</code> <p>If there's an API error.</p> <code>SignalRGBError</code> <p>For any other unexpected errors.</p> Example <p>client = SignalRGBClient() current_layout = client.current_layout print(f\"Current layout: {current_layout.id}\")</p>"},{"location":"api/client/#signalrgb.client.SignalRGBClient.enabled","title":"<code>enabled</code>  <code>property</code> <code>writable</code>","text":"<p>Get or set the current enabled state of the canvas.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>The current enabled state.</p> <p>Raises:</p> Type Description <code>ConnectionError</code> <p>If there's a connection error.</p> <code>APIError</code> <p>If there's an API error.</p> <code>SignalRGBError</code> <p>For any other unexpected errors.</p> Example <p>client = SignalRGBClient() print(f\"Canvas enabled: {client.enabled}\") client.enabled = False print(f\"Canvas now disabled: {not client.enabled}\")</p>"},{"location":"api/client/#signalrgb.client.SignalRGBClient.__init__","title":"<code>__init__(host='localhost', port=DEFAULT_PORT, timeout=10.0)</code>","text":"<p>Initialize the SignalRGBClient.</p> <p>Parameters:</p> Name Type Description Default <code>host</code> <code>str</code> <p>The host of the SignalRGB API. Defaults to 'localhost'.</p> <code>'localhost'</code> <code>port</code> <code>int</code> <p>The port of the SignalRGB API. Defaults to DEFAULT_PORT.</p> <code>DEFAULT_PORT</code> <code>timeout</code> <code>float</code> <p>The timeout for API requests in seconds. Defaults to 10.0.</p> <code>10.0</code> Example <p>client = SignalRGBClient() client = SignalRGBClient(\"192.168.1.100\", 8080, 5.0)</p> Source code in <code>signalrgb/client.py</code> <pre><code>def __init__(self, host: str = \"localhost\", port: int = DEFAULT_PORT, timeout: float = 10.0):\n    \"\"\"Initialize the SignalRGBClient.\n\n    Args:\n        host: The host of the SignalRGB API. Defaults to 'localhost'.\n        port: The port of the SignalRGB API. Defaults to DEFAULT_PORT.\n        timeout: The timeout for API requests in seconds. Defaults to 10.0.\n\n    Example:\n        &gt;&gt;&gt; client = SignalRGBClient()\n        &gt;&gt;&gt; client = SignalRGBClient(\"192.168.1.100\", 8080, 5.0)\n    \"\"\"\n    self._base_url = f\"http://{host}:{port}\"\n    self._session = requests.Session()\n    self._timeout = timeout\n    self._effects_cache: list[Effect] | None = None\n</code></pre>"},{"location":"api/client/#signalrgb.client.SignalRGBClient._ensure_response_ok","title":"<code>_ensure_response_ok(response)</code>  <code>staticmethod</code>","text":"<p>Ensure the response status is 'ok'.</p> <p>Parameters:</p> Name Type Description Default <code>response</code> <code>SignalRGBResponse</code> <p>The response to check.</p> required <p>Raises:</p> Type Description <code>APIError</code> <p>If the response status is not 'ok'.</p> Source code in <code>signalrgb/client.py</code> <pre><code>@staticmethod\ndef _ensure_response_ok(response: SignalRGBResponse) -&gt; None:\n    \"\"\"Ensure the response status is 'ok'.\n\n    Args:\n        response: The response to check.\n\n    Raises:\n        APIError: If the response status is not 'ok'.\n    \"\"\"\n    if response.status != \"ok\":\n        error = response.errors[0] if response.errors else None\n        raise APIError(f\"API returned non-OK status: {response.status}\", error)\n</code></pre>"},{"location":"api/client/#signalrgb.client.SignalRGBClient._get_current_state","title":"<code>_get_current_state()</code>","text":"<p>Get the current state of the SignalRGB instance.</p> <p>Returns:</p> Name Type Description <code>CurrentStateHolder</code> <code>CurrentStateHolder</code> <p>The current state of the SignalRGB instance.</p> <p>Raises:</p> Type Description <code>ConnectionError</code> <p>If there's a connection error.</p> <code>APIError</code> <p>If there's an API error.</p> <code>SignalRGBError</code> <p>For any other unexpected errors.</p> Source code in <code>signalrgb/client.py</code> <pre><code>def _get_current_state(self) -&gt; CurrentStateHolder:\n    \"\"\"Get the current state of the SignalRGB instance.\n\n    Returns:\n        CurrentStateHolder: The current state of the SignalRGB instance.\n\n    Raises:\n        ConnectionError: If there's a connection error.\n        APIError: If there's an API error.\n        SignalRGBError: For any other unexpected errors.\n    \"\"\"\n    with self._request_context(\"GET\", LIGHTING_V1) as data:\n        response = CurrentStateResponse.from_dict(data)\n        self._ensure_response_ok(response)\n        if response.data is None:\n            raise APIError(\"No current state data in the response\")\n        return response.data\n</code></pre>"},{"location":"api/client/#signalrgb.client.SignalRGBClient._get_effects_cached","title":"<code>_get_effects_cached()</code>","text":"<p>Internal method to get effects with caching.</p> Source code in <code>signalrgb/client.py</code> <pre><code>def _get_effects_cached(self) -&gt; list[Effect]:\n    \"\"\"Internal method to get effects with caching.\"\"\"\n    if self._effects_cache is None:\n        with self._request_context(\"GET\", f\"{LIGHTING_V1}/effects\") as data:\n            response = EffectListResponse.from_dict(data)\n            self._ensure_response_ok(response)\n            effects = response.data\n            if effects is None or effects.items is None:\n                raise APIError(\"No effects data in the response\")\n            self._effects_cache = effects.items\n    return self._effects_cache\n</code></pre>"},{"location":"api/client/#signalrgb.client.SignalRGBClient._request_context","title":"<code>_request_context(method, endpoint, **kwargs)</code>","text":"<p>Context manager for making API requests.</p> <p>This method handles common exception cases and debug logging.</p> <p>Parameters:</p> Name Type Description Default <code>method</code> <code>str</code> <p>The HTTP method to use for the request.</p> required <code>endpoint</code> <code>str</code> <p>The API endpoint to request.</p> required <code>**kwargs</code> <code>Any</code> <p>Additional arguments to pass to the request.</p> <code>{}</code> <p>Yields:</p> Type Description <code>dict[str, Any]</code> <p>The JSON response from the API.</p> <p>Raises:</p> Type Description <code>ConnectionError</code> <p>If there's a connection error.</p> <code>APIError</code> <p>If there's an API error.</p> <code>SignalRGBError</code> <p>For any other unexpected errors.</p> Source code in <code>signalrgb/client.py</code> <pre><code>@contextmanager\ndef _request_context(self, method: str, endpoint: str, **kwargs: Any) -&gt; Iterator[dict[str, Any]]:\n    \"\"\"Context manager for making API requests.\n\n    This method handles common exception cases and debug logging.\n\n    Args:\n        method: The HTTP method to use for the request.\n        endpoint: The API endpoint to request.\n        **kwargs: Additional arguments to pass to the request.\n\n    Yields:\n        The JSON response from the API.\n\n    Raises:\n        ConnectionError: If there's a connection error.\n        APIError: If there's an API error.\n        SignalRGBError: For any other unexpected errors.\n    \"\"\"\n    url = f\"{self._base_url}{endpoint}\"\n    debug = os.getenv(\"SIGNALRGB_DEBUG\", \"0\") == \"1\"\n\n    if debug:\n        pass\n\n    try:\n        response = self._session.request(method, url, timeout=self._timeout, **kwargs)\n        response.raise_for_status()\n\n        if debug:\n            pass\n\n        yield response.json()\n    except requests.ConnectionError as e:\n        raise ConnectionError(f\"Failed to connect to SignalRGB API: {e}\", Error(title=str(e))) from e\n    except Timeout as e:\n        raise ConnectionError(\"Request timed out\", Error(title=\"Request Timeout\")) from e\n    except requests.HTTPError as e:\n        if e.response is not None:\n            error_data = e.response.json().get(\"errors\", [{}])[0]\n            error = Error.from_dict(error_data)\n            raise APIError(f\"HTTP error occurred: {e}\", error) from e\n        raise APIError(f\"HTTP error occurred: {e}\", Error(title=str(e))) from e\n    except RequestException as e:\n        raise APIError(f\"An error occurred while making the request: {e}\", Error(title=str(e))) from e\n    except (ValueError, TypeError) as e:\n        # More specific exceptions instead of catching generic Exception\n        raise SignalRGBError(f\"An unexpected error occurred: {e}\") from e\n</code></pre>"},{"location":"api/client/#signalrgb.client.SignalRGBClient.apply_effect","title":"<code>apply_effect(effect_id)</code>","text":"<p>Apply an effect.</p> <p>Parameters:</p> Name Type Description Default <code>effect_id</code> <code>str</code> <p>The ID of the effect to apply.</p> required <p>Raises:</p> Type Description <code>ConnectionError</code> <p>If there's a connection error.</p> <code>APIError</code> <p>If there's an API error.</p> <code>SignalRGBError</code> <p>For any other unexpected errors.</p> Example <p>client = SignalRGBClient() client.apply_effect(\"example_effect_id\") print(\"Effect applied successfully\")</p> Source code in <code>signalrgb/client.py</code> <pre><code>def apply_effect(self, effect_id: str) -&gt; None:\n    \"\"\"Apply an effect.\n\n    Args:\n        effect_id (str): The ID of the effect to apply.\n\n    Raises:\n        ConnectionError: If there's a connection error.\n        APIError: If there's an API error.\n        SignalRGBError: For any other unexpected errors.\n\n    Example:\n        &gt;&gt;&gt; client = SignalRGBClient()\n        &gt;&gt;&gt; client.apply_effect(\"example_effect_id\")\n        &gt;&gt;&gt; print(\"Effect applied successfully\")\n    \"\"\"\n    with self._request_context(\"POST\", f\"{LIGHTING_V1}/effects/{effect_id}/apply\") as data:\n        response = SignalRGBResponse.from_dict(data)\n        self._ensure_response_ok(response)\n</code></pre>"},{"location":"api/client/#signalrgb.client.SignalRGBClient.apply_effect_by_name","title":"<code>apply_effect_by_name(effect_name)</code>","text":"<p>Apply an effect by name.</p> <p>Parameters:</p> Name Type Description Default <code>effect_name</code> <code>str</code> <p>The name of the effect to apply.</p> required <p>Raises:</p> Type Description <code>NotFoundError</code> <p>If the effect with the given name is not found.</p> <code>ConnectionError</code> <p>If there's a connection error.</p> <code>APIError</code> <p>If there's an API error.</p> <code>SignalRGBError</code> <p>For any other unexpected errors.</p> Example <p>client = SignalRGBClient() client.apply_effect_by_name(\"Rainbow Wave\") print(\"Effect applied successfully\")</p> Source code in <code>signalrgb/client.py</code> <pre><code>def apply_effect_by_name(self, effect_name: str) -&gt; None:\n    \"\"\"Apply an effect by name.\n\n    Args:\n        effect_name: The name of the effect to apply.\n\n    Raises:\n        NotFoundError: If the effect with the given name is not found.\n        ConnectionError: If there's a connection error.\n        APIError: If there's an API error.\n        SignalRGBError: For any other unexpected errors.\n\n    Example:\n        &gt;&gt;&gt; client = SignalRGBClient()\n        &gt;&gt;&gt; client.apply_effect_by_name(\"Rainbow Wave\")\n        &gt;&gt;&gt; print(\"Effect applied successfully\")\n    \"\"\"\n    effect = self.get_effect_by_name(effect_name)\n    apply_url = effect.links.apply\n    if apply_url is None:\n        # Fallback if apply link is missing\n        self.apply_effect(effect.id)\n    else:\n        with self._request_context(\"POST\", apply_url):\n            pass\n</code></pre>"},{"location":"api/client/#signalrgb.client.SignalRGBClient.apply_effect_preset","title":"<code>apply_effect_preset(effect_id, preset_id)</code>","text":"<p>Apply a preset for a specific effect.</p> <p>Parameters:</p> Name Type Description Default <code>effect_id</code> <code>str</code> <p>The ID of the effect to apply the preset to.</p> required <code>preset_id</code> <code>str</code> <p>The ID of the preset to apply.</p> required <p>Raises:</p> Type Description <code>NotFoundError</code> <p>If the effect with the given ID is not found.</p> <code>ConnectionError</code> <p>If there's a connection error.</p> <code>APIError</code> <p>If there's an API error.</p> <code>SignalRGBError</code> <p>For any other unexpected errors.</p> Example <p>client = SignalRGBClient() client.apply_effect_preset(\"example_effect_id\", \"My Fancy Preset 1\") print(\"Preset applied successfully\")</p> Source code in <code>signalrgb/client.py</code> <pre><code>def apply_effect_preset(self, effect_id: str, preset_id: str) -&gt; None:\n    \"\"\"Apply a preset for a specific effect.\n\n    Args:\n        effect_id (str): The ID of the effect to apply the preset to.\n        preset_id (str): The ID of the preset to apply.\n\n    Raises:\n        NotFoundError: If the effect with the given ID is not found.\n        ConnectionError: If there's a connection error.\n        APIError: If there's an API error.\n        SignalRGBError: For any other unexpected errors.\n\n    Example:\n        &gt;&gt;&gt; client = SignalRGBClient()\n        &gt;&gt;&gt; client.apply_effect_preset(\"example_effect_id\", \"My Fancy Preset 1\")\n        &gt;&gt;&gt; print(\"Preset applied successfully\")\n    \"\"\"\n    try:\n        with self._request_context(\n            \"PATCH\",\n            f\"{LIGHTING_V1}/effects/{effect_id}/presets\",\n            json={\"preset\": preset_id},\n        ) as data:\n            response = EffectPresetResponse.from_dict(data)\n            self._ensure_response_ok(response)\n    except APIError as e:\n        if e.error and e.error.code == \"not_found\":\n            raise NotFoundError(\n                f\"Effect with ID '{effect_id}' or preset '{preset_id}' not found\",\n                e.error,\n            ) from e\n        raise\n</code></pre>"},{"location":"api/client/#signalrgb.client.SignalRGBClient.apply_next_effect","title":"<code>apply_next_effect()</code>","text":"<p>Apply the next effect in history or a random effect if there's no next effect.</p> <p>Returns:</p> Name Type Description <code>Effect</code> <code>Effect</code> <p>The newly applied effect.</p> <p>Raises:</p> Type Description <code>ConnectionError</code> <p>If there's a connection error.</p> <code>APIError</code> <p>If there's an API error.</p> <code>SignalRGBError</code> <p>For any other unexpected errors.</p> Example <p>client = SignalRGBClient() new_effect = client.apply_next_effect() print(f\"Applied effect: {new_effect.attributes.name}\")</p> Source code in <code>signalrgb/client.py</code> <pre><code>def apply_next_effect(self) -&gt; Effect:\n    \"\"\"Apply the next effect in history or a random effect if there's no next effect.\n\n    Returns:\n        Effect: The newly applied effect.\n\n    Raises:\n        ConnectionError: If there's a connection error.\n        APIError: If there's an API error.\n        SignalRGBError: For any other unexpected errors.\n\n    Example:\n        &gt;&gt;&gt; client = SignalRGBClient()\n        &gt;&gt;&gt; new_effect = client.apply_next_effect()\n        &gt;&gt;&gt; print(f\"Applied effect: {new_effect.attributes.name}\")\n    \"\"\"\n    with self._request_context(\"POST\", f\"{LIGHTING_V1}/next\") as data:\n        response = EffectDetailsResponse.from_dict(data)\n        self._ensure_response_ok(response)\n        if response.data is None:\n            raise APIError(\"No effect data in the response\")\n        return response.data\n</code></pre>"},{"location":"api/client/#signalrgb.client.SignalRGBClient.apply_previous_effect","title":"<code>apply_previous_effect()</code>","text":"<p>Apply the previous effect in history.</p> <p>Returns:</p> Name Type Description <code>Effect</code> <code>Effect</code> <p>The newly applied effect.</p> <p>Raises:</p> Type Description <code>ConnectionError</code> <p>If there's a connection error.</p> <code>APIError</code> <p>If there's an API error.</p> <code>SignalRGBError</code> <p>For any other unexpected errors.</p> Example <p>client = SignalRGBClient() new_effect = client.apply_previous_effect() print(f\"Applied effect: {new_effect.attributes.name}\")</p> Source code in <code>signalrgb/client.py</code> <pre><code>def apply_previous_effect(self) -&gt; Effect:\n    \"\"\"Apply the previous effect in history.\n\n    Returns:\n        Effect: The newly applied effect.\n\n    Raises:\n        ConnectionError: If there's a connection error.\n        APIError: If there's an API error.\n        SignalRGBError: For any other unexpected errors.\n\n    Example:\n        &gt;&gt;&gt; client = SignalRGBClient()\n        &gt;&gt;&gt; new_effect = client.apply_previous_effect()\n        &gt;&gt;&gt; print(f\"Applied effect: {new_effect.attributes.name}\")\n    \"\"\"\n    with self._request_context(\"POST\", f\"{LIGHTING_V1}/previous\") as data:\n        response = EffectDetailsResponse.from_dict(data)\n        self._ensure_response_ok(response)\n        if response.data is None:\n            raise APIError(\"No effect data in the response\")\n        return response.data\n</code></pre>"},{"location":"api/client/#signalrgb.client.SignalRGBClient.apply_random_effect","title":"<code>apply_random_effect()</code>","text":"<p>Apply a random effect.</p> <p>Returns:</p> Name Type Description <code>Effect</code> <code>Effect</code> <p>The newly applied random effect.</p> <p>Raises:</p> Type Description <code>ConnectionError</code> <p>If there's a connection error.</p> <code>APIError</code> <p>If there's an API error.</p> <code>SignalRGBError</code> <p>For any other unexpected errors.</p> Example <p>client = SignalRGBClient() random_effect = client.apply_random_effect() print(f\"Applied random effect: {random_effect.attributes.name}\")</p> Source code in <code>signalrgb/client.py</code> <pre><code>def apply_random_effect(self) -&gt; Effect:\n    \"\"\"Apply a random effect.\n\n    Returns:\n        Effect: The newly applied random effect.\n\n    Raises:\n        ConnectionError: If there's a connection error.\n        APIError: If there's an API error.\n        SignalRGBError: For any other unexpected errors.\n\n    Example:\n        &gt;&gt;&gt; client = SignalRGBClient()\n        &gt;&gt;&gt; random_effect = client.apply_random_effect()\n        &gt;&gt;&gt; print(f\"Applied random effect: {random_effect.attributes.name}\")\n    \"\"\"\n    with self._request_context(\"POST\", f\"{LIGHTING_V1}/shuffle\") as data:\n        response = EffectDetailsResponse.from_dict(data)\n        self._ensure_response_ok(response)\n        if response.data is None:\n            raise APIError(\"No effect data in the response\")\n        return response.data\n</code></pre>"},{"location":"api/client/#signalrgb.client.SignalRGBClient.get_current_effect","title":"<code>get_current_effect()</code>","text":"<p>Get the current effect.</p> <p>Returns:</p> Name Type Description <code>Effect</code> <code>Effect</code> <p>The currently active effect.</p> <p>Raises:</p> Type Description <code>ConnectionError</code> <p>If there's a connection error.</p> <code>APIError</code> <p>If there's an API error.</p> <code>SignalRGBError</code> <p>For any other unexpected errors.</p> Example <p>client = SignalRGBClient() current_effect = client.get_current_effect() print(f\"Current effect: {current_effect.attributes.name}\")</p> Source code in <code>signalrgb/client.py</code> <pre><code>def get_current_effect(self) -&gt; Effect:\n    \"\"\"Get the current effect.\n\n    Returns:\n        Effect: The currently active effect.\n\n    Raises:\n        ConnectionError: If there's a connection error.\n        APIError: If there's an API error.\n        SignalRGBError: For any other unexpected errors.\n\n    Example:\n        &gt;&gt;&gt; client = SignalRGBClient()\n        &gt;&gt;&gt; current_effect = client.get_current_effect()\n        &gt;&gt;&gt; print(f\"Current effect: {current_effect.attributes.name}\")\n    \"\"\"\n    state = self._get_current_state()\n    if state.attributes is None:\n        raise APIError(\"No current effect data in the response\")\n    return self.get_effect(state.id)\n</code></pre>"},{"location":"api/client/#signalrgb.client.SignalRGBClient.get_effect","title":"<code>get_effect(effect_id)</code>","text":"<p>Get details of a specific effect.</p> <p>Parameters:</p> Name Type Description Default <code>effect_id</code> <code>str</code> <p>The ID of the effect to retrieve.</p> required <p>Returns:</p> Name Type Description <code>Effect</code> <code>Effect</code> <p>The requested effect.</p> <p>Raises:</p> Type Description <code>NotFoundError</code> <p>If the effect with the given ID is not found.</p> <code>ConnectionError</code> <p>If there's a connection error.</p> <code>APIError</code> <p>If there's an API error.</p> <code>SignalRGBError</code> <p>For any other unexpected errors.</p> Example <p>client = SignalRGBClient() effect = client.get_effect(\"example_effect_id\") print(f\"Effect name: {effect.attributes.name}\")</p> Source code in <code>signalrgb/client.py</code> <pre><code>def get_effect(self, effect_id: str) -&gt; Effect:\n    \"\"\"Get details of a specific effect.\n\n    Args:\n        effect_id (str): The ID of the effect to retrieve.\n\n    Returns:\n        Effect: The requested effect.\n\n    Raises:\n        NotFoundError: If the effect with the given ID is not found.\n        ConnectionError: If there's a connection error.\n        APIError: If there's an API error.\n        SignalRGBError: For any other unexpected errors.\n\n    Example:\n        &gt;&gt;&gt; client = SignalRGBClient()\n        &gt;&gt;&gt; effect = client.get_effect(\"example_effect_id\")\n        &gt;&gt;&gt; print(f\"Effect name: {effect.attributes.name}\")\n    \"\"\"\n    try:\n        with self._request_context(\"GET\", f\"{LIGHTING_V1}/effects/{effect_id}\") as data:\n            response = EffectDetailsResponse.from_dict(data)\n            self._ensure_response_ok(response)\n            if response.data is None:\n                raise APIError(\"No effect data in the response\")\n            return response.data\n    except APIError as e:\n        if e.error and e.error.code == \"not_found\":\n            raise NotFoundError(f\"Effect with ID '{effect_id}' not found\", e.error) from e\n        raise\n</code></pre>"},{"location":"api/client/#signalrgb.client.SignalRGBClient.get_effect_by_name","title":"<code>get_effect_by_name(effect_name)</code>","text":"<p>Get details of a specific effect by name.</p> <p>Parameters:</p> Name Type Description Default <code>effect_name</code> <code>str</code> <p>The name of the effect to retrieve.</p> required <p>Returns:</p> Name Type Description <code>Effect</code> <code>Effect</code> <p>The requested effect.</p> <p>Raises:</p> Type Description <code>NotFoundError</code> <p>If the effect with the given name is not found.</p> <code>ConnectionError</code> <p>If there's a connection error.</p> <code>APIError</code> <p>If there's an API error.</p> <code>SignalRGBError</code> <p>For any other unexpected errors.</p> Example <p>client = SignalRGBClient() effect = client.get_effect_by_name(\"Rainbow Wave\") print(f\"Effect ID: {effect.id}\")</p> Source code in <code>signalrgb/client.py</code> <pre><code>def get_effect_by_name(self, effect_name: str) -&gt; Effect:\n    \"\"\"Get details of a specific effect by name.\n\n    Args:\n        effect_name: The name of the effect to retrieve.\n\n    Returns:\n        Effect: The requested effect.\n\n    Raises:\n        NotFoundError: If the effect with the given name is not found.\n        ConnectionError: If there's a connection error.\n        APIError: If there's an API error.\n        SignalRGBError: For any other unexpected errors.\n\n    Example:\n        &gt;&gt;&gt; client = SignalRGBClient()\n        &gt;&gt;&gt; effect = client.get_effect_by_name(\"Rainbow Wave\")\n        &gt;&gt;&gt; print(f\"Effect ID: {effect.id}\")\n    \"\"\"\n    effect = next(\n        (e for e in self.get_effects() if e.attributes.name == effect_name),\n        None,\n    )\n    if effect is None:\n        raise NotFoundError(f\"Effect '{effect_name}' not found\")\n    return self.get_effect(effect.id)\n</code></pre>"},{"location":"api/client/#signalrgb.client.SignalRGBClient.get_effect_presets","title":"<code>get_effect_presets(effect_id)</code>","text":"<p>Get presets for a specific effect.</p> <p>Parameters:</p> Name Type Description Default <code>effect_id</code> <code>str</code> <p>The ID of the effect to retrieve presets for.</p> required <p>Returns:</p> Type Description <code>list[EffectPreset]</code> <p>List[EffectPreset]: A list of effect presets.</p> <p>Raises:</p> Type Description <code>NotFoundError</code> <p>If the effect with the given ID is not found.</p> <code>ConnectionError</code> <p>If there's a connection error.</p> <code>APIError</code> <p>If there's an API error.</p> <code>SignalRGBError</code> <p>For any other unexpected errors.</p> Example <p>client = SignalRGBClient() presets = client.get_effect_presets(\"example_effect_id\") for preset in presets: ...     print(f\"Preset ID: {preset.id}, Name: {preset.name}\")</p> Source code in <code>signalrgb/client.py</code> <pre><code>def get_effect_presets(self, effect_id: str) -&gt; list[EffectPreset]:\n    \"\"\"Get presets for a specific effect.\n\n    Args:\n        effect_id (str): The ID of the effect to retrieve presets for.\n\n    Returns:\n        List[EffectPreset]: A list of effect presets.\n\n    Raises:\n        NotFoundError: If the effect with the given ID is not found.\n        ConnectionError: If there's a connection error.\n        APIError: If there's an API error.\n        SignalRGBError: For any other unexpected errors.\n\n    Example:\n        &gt;&gt;&gt; client = SignalRGBClient()\n        &gt;&gt;&gt; presets = client.get_effect_presets(\"example_effect_id\")\n        &gt;&gt;&gt; for preset in presets:\n        ...     print(f\"Preset ID: {preset.id}, Name: {preset.name}\")\n    \"\"\"\n    try:\n        with self._request_context(\"GET\", f\"{LIGHTING_V1}/effects/{effect_id}/presets\") as data:\n            response = EffectPresetListResponse.from_dict(data)\n            self._ensure_response_ok(response)\n            if response.data is None:\n                raise APIError(\"No preset data in the response\")\n            return response.data.items\n    except APIError as e:\n        if e.error and e.error.code == \"not_found\":\n            raise NotFoundError(f\"Effect with ID '{effect_id}' not found\", e.error) from e\n        raise\n</code></pre>"},{"location":"api/client/#signalrgb.client.SignalRGBClient.get_effects","title":"<code>get_effects()</code>","text":"<p>List available effects.</p> <p>Returns:</p> Type Description <code>list[Effect]</code> <p>List[Effect]: A list of available effects.</p> <p>Raises:</p> Type Description <code>ConnectionError</code> <p>If there's a connection error.</p> <code>APIError</code> <p>If there's an error retrieving the effects.</p> <code>SignalRGBError</code> <p>For any other unexpected errors.</p> Example <p>client = SignalRGBClient() effects = client.get_effects() print(f\"Found {len(effects)} effects\")</p> Source code in <code>signalrgb/client.py</code> <pre><code>def get_effects(self) -&gt; list[Effect]:\n    \"\"\"List available effects.\n\n    Returns:\n        List[Effect]: A list of available effects.\n\n    Raises:\n        ConnectionError: If there's a connection error.\n        APIError: If there's an error retrieving the effects.\n        SignalRGBError: For any other unexpected errors.\n\n    Example:\n        &gt;&gt;&gt; client = SignalRGBClient()\n        &gt;&gt;&gt; effects = client.get_effects()\n        &gt;&gt;&gt; print(f\"Found {len(effects)} effects\")\n    \"\"\"\n    return self._get_effects_cached()\n</code></pre>"},{"location":"api/client/#signalrgb.client.SignalRGBClient.get_layouts","title":"<code>get_layouts()</code>","text":"<p>Get all available layouts.</p> <p>Returns:</p> Type Description <code>list[Layout]</code> <p>List[Layout]: A list of all available layouts.</p> <p>Raises:</p> Type Description <code>ConnectionError</code> <p>If there's a connection error.</p> <code>APIError</code> <p>If there's an API error.</p> <code>SignalRGBError</code> <p>For any other unexpected errors.</p> Example <p>client = SignalRGBClient() layouts = client.get_layouts() for layout in layouts: ...     print(f\"Layout: {layout.id}\")</p> Source code in <code>signalrgb/client.py</code> <pre><code>def get_layouts(self) -&gt; list[Layout]:\n    \"\"\"Get all available layouts.\n\n    Returns:\n        List[Layout]: A list of all available layouts.\n\n    Raises:\n        ConnectionError: If there's a connection error.\n        APIError: If there's an API error.\n        SignalRGBError: For any other unexpected errors.\n\n    Example:\n        &gt;&gt;&gt; client = SignalRGBClient()\n        &gt;&gt;&gt; layouts = client.get_layouts()\n        &gt;&gt;&gt; for layout in layouts:\n        ...     print(f\"Layout: {layout.id}\")\n    \"\"\"\n    with self._request_context(\"GET\", f\"{SCENES_V1}/layouts\") as data:\n        response = LayoutListResponse.from_dict(data)\n        self._ensure_response_ok(response)\n        if \"data\" not in data or \"items\" not in data[\"data\"]:\n            raise APIError(\"No layouts data in the response\")\n        return [Layout.from_dict(item) for item in data[\"data\"][\"items\"]]\n</code></pre>"},{"location":"api/client/#signalrgb.client.SignalRGBClient.get_next_effect","title":"<code>get_next_effect()</code>","text":"<p>Get information about the next effect in history.</p> <p>Returns:</p> Type Description <code>Effect | None</code> <p>Optional[Effect]: The next effect if available, None otherwise.</p> <p>Raises:</p> Type Description <code>ConnectionError</code> <p>If there's a connection error.</p> <code>APIError</code> <p>If there's an API error.</p> <code>SignalRGBError</code> <p>For any other unexpected errors.</p> Example <p>client = SignalRGBClient() next_effect = client.get_next_effect() if next_effect: ...     print(f\"Next effect: {next_effect.attributes.name}\") ... else: ...     print(\"No next effect available\")</p> Source code in <code>signalrgb/client.py</code> <pre><code>def get_next_effect(self) -&gt; Effect | None:\n    \"\"\"Get information about the next effect in history.\n\n    Returns:\n        Optional[Effect]: The next effect if available, None otherwise.\n\n    Raises:\n        ConnectionError: If there's a connection error.\n        APIError: If there's an API error.\n        SignalRGBError: For any other unexpected errors.\n\n    Example:\n        &gt;&gt;&gt; client = SignalRGBClient()\n        &gt;&gt;&gt; next_effect = client.get_next_effect()\n        &gt;&gt;&gt; if next_effect:\n        ...     print(f\"Next effect: {next_effect.attributes.name}\")\n        ... else:\n        ...     print(\"No next effect available\")\n    \"\"\"\n    try:\n        with self._request_context(\"GET\", f\"{LIGHTING_V1}/next\") as data:\n            response = EffectDetailsResponse.from_dict(data)\n            self._ensure_response_ok(response)\n            return response.data\n    except APIError as e:\n        if e.error and e.error.code == \"409\":\n            return None\n        raise\n</code></pre>"},{"location":"api/client/#signalrgb.client.SignalRGBClient.get_previous_effect","title":"<code>get_previous_effect()</code>","text":"<p>Get information about the previous effect in history.</p> <p>Returns:</p> Type Description <code>Effect | None</code> <p>Optional[Effect]: The previous effect if available, None otherwise.</p> <p>Raises:</p> Type Description <code>ConnectionError</code> <p>If there's a connection error.</p> <code>APIError</code> <p>If there's an API error.</p> <code>SignalRGBError</code> <p>For any other unexpected errors.</p> Example <p>client = SignalRGBClient() prev_effect = client.get_previous_effect() if prev_effect: ...     print(f\"Previous effect: {prev_effect.attributes.name}\") ... else: ...     print(\"No previous effect available\")</p> Source code in <code>signalrgb/client.py</code> <pre><code>def get_previous_effect(self) -&gt; Effect | None:\n    \"\"\"Get information about the previous effect in history.\n\n    Returns:\n        Optional[Effect]: The previous effect if available, None otherwise.\n\n    Raises:\n        ConnectionError: If there's a connection error.\n        APIError: If there's an API error.\n        SignalRGBError: For any other unexpected errors.\n\n    Example:\n        &gt;&gt;&gt; client = SignalRGBClient()\n        &gt;&gt;&gt; prev_effect = client.get_previous_effect()\n        &gt;&gt;&gt; if prev_effect:\n        ...     print(f\"Previous effect: {prev_effect.attributes.name}\")\n        ... else:\n        ...     print(\"No previous effect available\")\n    \"\"\"\n    try:\n        with self._request_context(\"GET\", f\"{LIGHTING_V1}/previous\") as data:\n            response = EffectDetailsResponse.from_dict(data)\n            self._ensure_response_ok(response)\n            return response.data\n    except APIError as e:\n        if e.error and e.error.code == \"409\":\n            return None\n        raise\n</code></pre>"},{"location":"api/client/#signalrgb.client.SignalRGBClient.refresh_effects","title":"<code>refresh_effects()</code>","text":"<p>Refresh the cached effects.</p> <p>This method clears the cache for the get_effects method, forcing a fresh retrieval of effects on the next call.</p> Example <p>client = SignalRGBClient() client.refresh_effects() fresh_effects = client.get_effects()</p> Source code in <code>signalrgb/client.py</code> <pre><code>def refresh_effects(self) -&gt; None:\n    \"\"\"Refresh the cached effects.\n\n    This method clears the cache for the get_effects method, forcing a fresh\n    retrieval of effects on the next call.\n\n    Example:\n        &gt;&gt;&gt; client = SignalRGBClient()\n        &gt;&gt;&gt; client.refresh_effects()\n        &gt;&gt;&gt; fresh_effects = client.get_effects()\n    \"\"\"\n    self._effects_cache = None\n</code></pre>"},{"location":"api/client/#exceptions","title":"Exceptions","text":"<p>The SignalRGB client defines several custom exceptions for error handling:</p>"},{"location":"api/client/#signalrgb.client.SignalRGBException","title":"<code>signalrgb.client.SignalRGBException = SignalRGBError</code>  <code>module-attribute</code>","text":""},{"location":"api/client/#signalrgb.client.ConnectionError","title":"<code>signalrgb.client.ConnectionError</code>","text":"<p>               Bases: <code>SignalRGBError</code></p> <p>Exception raised for connection errors.</p> <p>This exception is raised when there's an issue connecting to the SignalRGB API.</p> Source code in <code>signalrgb/client.py</code> <pre><code>class ConnectionError(SignalRGBError):\n    \"\"\"Exception raised for connection errors.\n\n    This exception is raised when there's an issue connecting to the SignalRGB API.\n    \"\"\"\n</code></pre>"},{"location":"api/client/#signalrgb.client.APIError","title":"<code>signalrgb.client.APIError</code>","text":"<p>               Bases: <code>SignalRGBError</code></p> <p>Exception raised for API errors.</p> <p>This exception is raised when the API returns an error response.</p> Source code in <code>signalrgb/client.py</code> <pre><code>class APIError(SignalRGBError):\n    \"\"\"Exception raised for API errors.\n\n    This exception is raised when the API returns an error response.\n    \"\"\"\n</code></pre>"},{"location":"api/client/#signalrgb.client.NotFoundError","title":"<code>signalrgb.client.NotFoundError</code>","text":"<p>               Bases: <code>SignalRGBError</code></p> <p>Exception raised when an item is not found.</p> <p>This exception is raised when trying to retrieve or apply a non-existent effect, preset, or layout.</p> Source code in <code>signalrgb/client.py</code> <pre><code>class NotFoundError(SignalRGBError):\n    \"\"\"Exception raised when an item is not found.\n\n    This exception is raised when trying to retrieve or apply a non-existent effect, preset, or layout.\n    \"\"\"\n</code></pre>"},{"location":"api/client/#usage-example","title":"Usage Example","text":"<p>Here's a basic example of how to use the SignalRGBClient:</p> <pre><code>from signalrgb import SignalRGBClient\n\n# Initialize the client\nclient = SignalRGBClient(host=\"localhost\", port=16038)\n\n# Get all effects\neffects = client.get_effects()\nfor effect in effects:\n    print(f\"Effect: {effect.attributes.name}\")\n\n# Apply an effect\nclient.apply_effect_by_name(\"Rainbow Wave\")\n\n# Get current effect\ncurrent_effect = client.get_current_effect()\nprint(f\"Current effect: {current_effect.attributes.name}\")\n</code></pre> <p>For more detailed usage examples, please refer to the Python Library Usage guide.</p>"},{"location":"api/models/","title":"SignalRGB Models API Reference","text":"<p>This page provides detailed API documentation for the data models used in the SignalRGB Python client. These models represent various data structures used in the SignalRGB API, including effects, responses, and error information.</p>"},{"location":"api/models/#attributes","title":"Attributes","text":""},{"location":"api/models/#signalrgb.model.Attributes","title":"<code>signalrgb.model.Attributes</code>  <code>dataclass</code>","text":"<p>               Bases: <code>DataClassDictMixin</code></p> <p>Attributes of an effect in SignalRGB.</p> <p>This class represents the various properties and capabilities of an effect. It includes details such as the effect's name, description, publisher, and various flags indicating the effect's capabilities.</p> <p>Attributes:</p> Name Type Description <code>description</code> <code>Optional[str]</code> <p>A description of the effect.</p> <code>developer_effect</code> <code>bool</code> <p>Indicates whether this is a developer-created effect.</p> <code>image</code> <code>Optional[str]</code> <p>URL or path to the effect's image, if available.</p> <code>name</code> <code>str</code> <p>The name of the effect.</p> <code>parameters</code> <code>Dict[str, Any]</code> <p>A dictionary of effect-specific parameters.</p> <code>publisher</code> <code>Optional[str]</code> <p>The publisher or creator of the effect.</p> <code>uses_audio</code> <code>bool</code> <p>Indicates whether the effect uses audio input.</p> <code>uses_input</code> <code>bool</code> <p>Indicates whether the effect uses user input.</p> <code>uses_meters</code> <code>bool</code> <p>Indicates whether the effect uses meter data.</p> <code>uses_video</code> <code>bool</code> <p>Indicates whether the effect uses video input.</p> Source code in <code>signalrgb/model.py</code> <pre><code>@dataclass\nclass Attributes(DataClassDictMixin):\n    \"\"\"\n    Attributes of an effect in SignalRGB.\n\n    This class represents the various properties and capabilities of an effect.\n    It includes details such as the effect's name, description, publisher, and various flags\n    indicating the effect's capabilities.\n\n    Attributes:\n        description (Optional[str]): A description of the effect.\n        developer_effect (bool): Indicates whether this is a developer-created effect.\n        image (Optional[str]): URL or path to the effect's image, if available.\n        name (str): The name of the effect.\n        parameters (Dict[str, Any]): A dictionary of effect-specific parameters.\n        publisher (Optional[str]): The publisher or creator of the effect.\n        uses_audio (bool): Indicates whether the effect uses audio input.\n        uses_input (bool): Indicates whether the effect uses user input.\n        uses_meters (bool): Indicates whether the effect uses meter data.\n        uses_video (bool): Indicates whether the effect uses video input.\n    \"\"\"\n\n    name: str\n    description: str | None = None\n    developer_effect: bool = False\n    image: str | None = None\n    parameters: dict[str, Any] = field(default_factory=dict)\n    publisher: str | None = None\n    uses_audio: bool = False\n    uses_input: bool = False\n    uses_meters: bool = False\n    uses_video: bool = False\n</code></pre>"},{"location":"api/models/#links","title":"Links","text":""},{"location":"api/models/#signalrgb.model.Links","title":"<code>signalrgb.model.Links</code>  <code>dataclass</code>","text":"<p>               Bases: <code>DataClassDictMixin</code></p> <p>Links associated with an effect in SignalRGB.</p> <p>This class represents the URLs related to an effect, such as where to apply it or retrieve its details.</p> <p>Attributes:</p> Name Type Description <code>apply</code> <code>Optional[str]</code> <p>URL to apply the effect, if available.</p> <code>self_link</code> <code>Optional[str]</code> <p>URL of the effect itself, typically for retrieving its details.</p> Source code in <code>signalrgb/model.py</code> <pre><code>@dataclass\nclass Links(DataClassDictMixin):\n    \"\"\"\n    Links associated with an effect in SignalRGB.\n\n    This class represents the URLs related to an effect, such as where to apply it\n    or retrieve its details.\n\n    Attributes:\n        apply (Optional[str]): URL to apply the effect, if available.\n        self_link (Optional[str]): URL of the effect itself, typically for retrieving its details.\n    \"\"\"\n\n    apply: str | None = None\n    self_link: str | None = None\n\n    class Config(BaseConfig):\n        aliases = {\"self_link\": \"self\"}\n</code></pre>"},{"location":"api/models/#effect","title":"Effect","text":""},{"location":"api/models/#signalrgb.model.Effect","title":"<code>signalrgb.model.Effect</code>  <code>dataclass</code>","text":"<p>               Bases: <code>DataClassDictMixin</code></p> <p>Represents a single effect in SignalRGB.</p> <p>This class combines the attributes and links of an effect with its unique identifier. It provides a complete representation of an effect in the SignalRGB system.</p> <p>Attributes:</p> Name Type Description <code>attributes</code> <code>Attributes</code> <p>The attributes of the effect.</p> <code>id</code> <code>str</code> <p>Unique identifier of the effect.</p> <code>links</code> <code>Links</code> <p>Links associated with the effect.</p> <code>type</code> <code>str</code> <p>Type of the object, typically 'effect'.</p> Source code in <code>signalrgb/model.py</code> <pre><code>@dataclass\nclass Effect(DataClassDictMixin):\n    \"\"\"\n    Represents a single effect in SignalRGB.\n\n    This class combines the attributes and links of an effect with its unique identifier.\n    It provides a complete representation of an effect in the SignalRGB system.\n\n    Attributes:\n        attributes (Attributes): The attributes of the effect.\n        id (str): Unique identifier of the effect.\n        links (Links): Links associated with the effect.\n        type (str): Type of the object, typically 'effect'.\n    \"\"\"\n\n    attributes: Attributes\n    id: str\n    links: Links\n    type: str\n</code></pre>"},{"location":"api/models/#effectlist","title":"EffectList","text":""},{"location":"api/models/#signalrgb.model.EffectList","title":"<code>signalrgb.model.EffectList</code>  <code>dataclass</code>","text":"<p>               Bases: <code>DataClassDictMixin</code></p> <p>A list of effects in SignalRGB.</p> <p>This class is used to represent multiple effects, typically in API responses that return a collection of effects.</p> <p>Attributes:</p> Name Type Description <code>items</code> <code>List[Effect]</code> <p>A list of Effect objects.</p> Source code in <code>signalrgb/model.py</code> <pre><code>@dataclass\nclass EffectList(DataClassDictMixin):\n    \"\"\"\n    A list of effects in SignalRGB.\n\n    This class is used to represent multiple effects, typically in API responses\n    that return a collection of effects.\n\n    Attributes:\n        items (List[Effect]): A list of Effect objects.\n    \"\"\"\n\n    items: list[Effect] = field(default_factory=list)\n</code></pre>"},{"location":"api/models/#error","title":"Error","text":""},{"location":"api/models/#signalrgb.model.Error","title":"<code>signalrgb.model.Error</code>  <code>dataclass</code>","text":"<p>               Bases: <code>DataClassDictMixin</code></p> <p>Represents an error returned by the SignalRGB API.</p> <p>This class includes details about the error such as its code, title, and a detailed message. It is typically used when the API encounters an error during request processing.</p> <p>Attributes:</p> Name Type Description <code>code</code> <code>Optional[str]</code> <p>An error code, if provided by the API.</p> <code>detail</code> <code>Optional[str]</code> <p>A detailed error message explaining the issue.</p> <code>title</code> <code>str</code> <p>A brief title or summary of the error.</p> Source code in <code>signalrgb/model.py</code> <pre><code>@dataclass\nclass Error(DataClassDictMixin):\n    \"\"\"\n    Represents an error returned by the SignalRGB API.\n\n    This class includes details about the error such as its code, title, and a detailed message.\n    It is typically used when the API encounters an error during request processing.\n\n    Attributes:\n        code (Optional[str]): An error code, if provided by the API.\n        detail (Optional[str]): A detailed error message explaining the issue.\n        title (str): A brief title or summary of the error.\n    \"\"\"\n\n    title: str\n    code: str | None = None\n    detail: str | None = None\n</code></pre>"},{"location":"api/models/#signalrgbresponse","title":"SignalRGBResponse","text":""},{"location":"api/models/#signalrgb.model.SignalRGBResponse","title":"<code>signalrgb.model.SignalRGBResponse</code>  <code>dataclass</code>","text":"<p>               Bases: <code>DataClassDictMixin</code></p> <p>Base class for responses from the SignalRGB API.</p> <p>This class includes common fields found in all API responses. It serves as a base for more specific response types and provides a consistent structure for handling API responses.</p> <p>Attributes:</p> Name Type Description <code>api_version</code> <code>str</code> <p>The version of the API used for this response.</p> <code>id</code> <code>int</code> <p>A unique identifier for this response.</p> <code>method</code> <code>str</code> <p>The HTTP method used for the request that generated this response.</p> <code>params</code> <code>Dict[str, Any]</code> <p>Any parameters that were part of the request.</p> <code>status</code> <code>str</code> <p>The status of the response, typically 'ok' or 'error'.</p> <code>errors</code> <code>List[Error]</code> <p>A list of Error objects if any errors occurred.</p> Source code in <code>signalrgb/model.py</code> <pre><code>@dataclass\nclass SignalRGBResponse(DataClassDictMixin):\n    \"\"\"\n    Base class for responses from the SignalRGB API.\n\n    This class includes common fields found in all API responses. It serves as a base\n    for more specific response types and provides a consistent structure for handling\n    API responses.\n\n    Attributes:\n        api_version (str): The version of the API used for this response.\n        id (int): A unique identifier for this response.\n        method (str): The HTTP method used for the request that generated this response.\n        params (Dict[str, Any]): Any parameters that were part of the request.\n        status (str): The status of the response, typically 'ok' or 'error'.\n        errors (List[Error]): A list of Error objects if any errors occurred.\n    \"\"\"\n\n    api_version: str\n    id: int\n    method: str\n    status: str\n    params: dict[str, Any] = field(default_factory=dict)\n    errors: list[Error] = field(default_factory=list)\n</code></pre>"},{"location":"api/models/#effectdetailsresponse","title":"EffectDetailsResponse","text":""},{"location":"api/models/#signalrgb.model.EffectDetailsResponse","title":"<code>signalrgb.model.EffectDetailsResponse</code>  <code>dataclass</code>","text":"<p>               Bases: <code>SignalRGBResponse</code></p> <p>Response model for requests that return details of a single effect.</p> <p>This class extends SignalRGBResponse and includes an additional field for the effect details.</p> <p>Attributes:</p> Name Type Description <code>data</code> <code>Optional[Effect]</code> <p>The details of the requested effect, if available.</p> Source code in <code>signalrgb/model.py</code> <pre><code>@dataclass\nclass EffectDetailsResponse(SignalRGBResponse):\n    \"\"\"\n    Response model for requests that return details of a single effect.\n\n    This class extends SignalRGBResponse and includes an additional field for\n    the effect details.\n\n    Attributes:\n        data (Optional[Effect]): The details of the requested effect, if available.\n    \"\"\"\n\n    data: Effect | None = None\n</code></pre>"},{"location":"api/models/#effectlistresponse","title":"EffectListResponse","text":""},{"location":"api/models/#signalrgb.model.EffectListResponse","title":"<code>signalrgb.model.EffectListResponse</code>  <code>dataclass</code>","text":"<p>               Bases: <code>SignalRGBResponse</code></p> <p>Response model for requests that return a list of effects.</p> <p>This class extends SignalRGBResponse and includes an additional field for the list of effects.</p> <p>Attributes:</p> Name Type Description <code>data</code> <code>Optional[EffectList]</code> <p>The list of effects returned by the API, if available.</p> Source code in <code>signalrgb/model.py</code> <pre><code>@dataclass\nclass EffectListResponse(SignalRGBResponse):\n    \"\"\"\n    Response model for requests that return a list of effects.\n\n    This class extends SignalRGBResponse and includes an additional field for\n    the list of effects.\n\n    Attributes:\n        data (Optional[EffectList]): The list of effects returned by the API, if available.\n    \"\"\"\n\n    data: EffectList | None = None\n</code></pre>"},{"location":"api/models/#usage-example","title":"Usage Example","text":"<p>Here's a basic example of how to work with these models:</p> <pre><code>from signalrgb import SignalRGBClient\nfrom signalrgb.model import Effect, Attributes\n\n# Initialize the client\nclient = SignalRGBClient()\n\n# Get an effect\neffect: Effect = client.get_effect_by_name(\"Sakura\")\n\n# Access effect attributes\nprint(f\"Effect name: {effect.attributes.name}\")\nprint(f\"Effect description: {effect.attributes.description}\")\nprint(f\"Effect uses audio: {effect.attributes.uses_audio}\")\n\n# Create a new effect (note: this is just an example, you can't actually create new effects via the API)\nnew_effect = Effect(\n    id=\"custom_effect_1\",\n    type=\"lighting\",\n    links=Links(apply=\"/api/v1/effects/custom_effect_1/apply\"),\n    attributes=Attributes(\n        name=\"My Custom Effect\",\n        description=\"A custom lighting effect\",\n        uses_audio=True\n    )\n)\n</code></pre> <p>For more detailed usage examples, please refer to the Python Library Usage guide.</p>"},{"location":"usage/cli/","title":"Command-Line Interface (CLI) Usage","text":"<p>signalrgb-python provides a user-friendly command-line interface for interacting with your SignalRGB setup. This guide covers the basic usage of the CLI.</p>"},{"location":"usage/cli/#basic-syntax","title":"Basic Syntax","text":"<p>The basic syntax for using the SignalRGB CLI is:</p> <pre><code>signalrgb [OPTIONS] COMMAND [SUBCOMMAND] [ARGS]...\n</code></pre> <p>You can always use the <code>--help</code> option to get more information about available commands and options:</p> <pre><code>signalrgb --help\n</code></pre>"},{"location":"usage/cli/#available-commands","title":"Available Commands","text":""},{"location":"usage/cli/#effect-commands","title":"Effect Commands","text":""},{"location":"usage/cli/#list-effects","title":"List Effects","text":"<p>To list all available lighting effects:</p> <pre><code>signalrgb effect list\n</code></pre>"},{"location":"usage/cli/#get-effect-details","title":"Get Effect Details","text":"<p>To get detailed information about a specific effect:</p> <pre><code>signalrgb effect \"Effect Name\"\n</code></pre> <p>Replace \"Effect Name\" with the name of the effect you want to inspect.</p>"},{"location":"usage/cli/#apply-an-effect","title":"Apply an Effect","text":"<p>To apply a specific effect:</p> <pre><code>signalrgb effect apply \"Effect Name\"\n</code></pre>"},{"location":"usage/cli/#get-current-effect","title":"Get Current Effect","text":"<p>To see which effect is currently active:</p> <pre><code>signalrgb effect\n</code></pre>"},{"location":"usage/cli/#preset-commands","title":"Preset Commands","text":""},{"location":"usage/cli/#list-presets","title":"List Presets","text":"<p>To list presets for the current effect:</p> <pre><code>signalrgb preset list\n</code></pre>"},{"location":"usage/cli/#apply-a-preset","title":"Apply a Preset","text":"<p>To apply a preset to the current effect:</p> <pre><code>signalrgb preset apply \"Preset Name\"\n</code></pre>"},{"location":"usage/cli/#layout-commands","title":"Layout Commands","text":""},{"location":"usage/cli/#list-layouts","title":"List Layouts","text":"<p>To list all available layouts:</p> <pre><code>signalrgb layout list\n</code></pre>"},{"location":"usage/cli/#set-current-layout","title":"Set Current Layout","text":"<p>To set the current layout:</p> <pre><code>signalrgb layout set \"Layout Name\"\n</code></pre>"},{"location":"usage/cli/#canvas-commands","title":"Canvas Commands","text":""},{"location":"usage/cli/#control-brightness","title":"Control Brightness","text":"<p>To set the brightness level (0-100):</p> <pre><code>signalrgb canvas brightness 75\n</code></pre> <p>To get the current brightness level:</p> <pre><code>signalrgb canvas brightness\n</code></pre>"},{"location":"usage/cli/#enabledisable-canvas","title":"Enable/Disable Canvas","text":"<p>To enable the canvas:</p> <pre><code>signalrgb canvas enable\n</code></pre> <p>To disable the canvas:</p> <pre><code>signalrgb canvas disable\n</code></pre>"},{"location":"usage/cli/#global-options","title":"Global Options","text":"<p>You can specify a custom host and port for all commands:</p> <pre><code>signalrgb --host my-pc.local --port 16038 effect list\n</code></pre>"},{"location":"usage/cli/#examples","title":"Examples","text":"<p>Here are some example use cases:</p> <ol> <li>List all effects and pipe the output to <code>grep</code> to find a specific effect:</li> </ol> <pre><code>signalrgb effect list | grep \"Electric Space\"\n</code></pre> <ol> <li>Apply the \"Rave Visualizer\" effect:</li> </ol> <pre><code>signalrgb effect apply \"Rave Visualizer\"\n</code></pre> <ol> <li>Get details of the current effect and save it to a file:</li> </ol> <pre><code>signalrgb effect &gt; current_effect.txt\n</code></pre> <ol> <li>Set the brightness to 50%:</li> </ol> <pre><code>signalrgb canvas brightness 50\n</code></pre> <ol> <li>Enable the canvas:</li> </ol> <pre><code>signalrgb canvas enable\n</code></pre> <ol> <li>List and apply a preset:</li> </ol> <pre><code>signalrgb preset list\nsignalrgb preset apply \"Cool Preset\"\n</code></pre> <ol> <li>Switch to a different layout:</li> </ol> <pre><code>signalrgb layout set \"Gaming Setup\"\n</code></pre> <p>Remember to refer to the <code>--help</code> option for each command to see all available options and arguments.</p>"},{"location":"usage/library/","title":"Python Library Usage","text":"<p>signalrgb-python can be easily integrated into your Python projects. This guide covers the basic usage of the library.</p>"},{"location":"usage/library/#initializing-the-client","title":"Initializing the Client","text":"<p>First, import the <code>SignalRGBClient</code> class and create an instance:</p> <pre><code>from signalrgb import SignalRGBClient\n\nclient = SignalRGBClient(host=\"localhost\", port=16038)\n</code></pre> <p>You can specify a custom host and port if your SignalRGB instance is not running on the default location.</p>"},{"location":"usage/library/#working-with-effects","title":"Working with Effects","text":""},{"location":"usage/library/#listing-effects","title":"Listing Effects","text":"<p>To get a list of all available effects:</p> <pre><code>effects = client.get_effects()\nfor effect in effects:\n    print(f\"Effect: {effect.attributes.name}\")\n</code></pre>"},{"location":"usage/library/#getting-effect-details","title":"Getting Effect Details","text":"<p>To get detailed information about a specific effect:</p> <pre><code>effect = client.get_effect_by_name(\"Rain\")\nprint(f\"Effect Name: {effect.attributes.name}\")\nprint(f\"Description: {effect.attributes.description}\")\nprint(f\"Uses Audio: {effect.attributes.uses_audio}\")\n</code></pre>"},{"location":"usage/library/#applying-an-effect","title":"Applying an Effect","text":"<p>To apply a specific effect:</p> <pre><code>client.apply_effect_by_name(\"Rainbow Wave\")\n</code></pre>"},{"location":"usage/library/#getting-the-current-effect","title":"Getting the Current Effect","text":"<p>To see which effect is currently active:</p> <pre><code>current_effect = client.get_current_effect()\nprint(f\"Current Effect: {current_effect.attributes.name}\")\n</code></pre>"},{"location":"usage/library/#working-with-presets","title":"Working with Presets","text":""},{"location":"usage/library/#listing-presets","title":"Listing Presets","text":"<p>To get a list of presets for a specific effect:</p> <pre><code>effect_id = client.get_current_effect().id\npresets = client.get_effect_presets(effect_id)\nfor preset in presets:\n    print(f\"Preset: {preset.id}\")\n</code></pre>"},{"location":"usage/library/#applying-a-preset","title":"Applying a Preset","text":"<p>To apply a preset to the current effect:</p> <pre><code>effect_id = client.get_current_effect().id\nclient.apply_effect_preset(effect_id, \"Cool Preset\")\n</code></pre>"},{"location":"usage/library/#working-with-layouts","title":"Working with Layouts","text":""},{"location":"usage/library/#listing-layouts","title":"Listing Layouts","text":"<p>To get a list of all available layouts:</p> <pre><code>layouts = client.get_layouts()\nfor layout in layouts:\n    print(f\"Layout: {layout.id}\")\n</code></pre>"},{"location":"usage/library/#setting-the-current-layout","title":"Setting the Current Layout","text":"<p>To set the current layout:</p> <pre><code>client.current_layout = \"Gaming Setup\"\n</code></pre>"},{"location":"usage/library/#getting-the-current-layout","title":"Getting the Current Layout","text":"<p>To get the current layout:</p> <pre><code>current_layout = client.current_layout\nprint(f\"Current Layout: {current_layout.id}\")\n</code></pre>"},{"location":"usage/library/#controlling-the-canvas","title":"Controlling the Canvas","text":""},{"location":"usage/library/#brightness","title":"Brightness","text":"<p>To get the current brightness level:</p> <pre><code>brightness = client.brightness\nprint(f\"Current brightness: {brightness}\")\n</code></pre> <p>To set the brightness level (0-100):</p> <pre><code>client.brightness = 75\nprint(f\"Brightness set to: {client.brightness}\")\n</code></pre>"},{"location":"usage/library/#enablingdisabling-the-canvas","title":"Enabling/Disabling the Canvas","text":"<p>To get the current enabled state:</p> <pre><code>enabled = client.enabled\nprint(f\"Canvas enabled: {enabled}\")\n</code></pre> <p>To enable or disable the canvas:</p> <pre><code>client.enabled = True\nprint(f\"Canvas enabled: {client.enabled}\")\n\nclient.enabled = False\nprint(f\"Canvas disabled: {client.enabled}\")\n</code></pre>"},{"location":"usage/library/#error-handling","title":"Error Handling","text":"<p>The client provides custom exceptions for different types of errors. You can handle these exceptions to provide better error messages or implement retry logic:</p> <pre><code>from signalrgb import SignalRGBClient, ConnectionError, APIError, NotFoundError\n\nclient = SignalRGBClient()\n\ntry:\n    client.apply_effect_by_name(\"Non-existent Effect\")\nexcept ConnectionError as e:\n    print(f\"Connection failed: {e}\")\nexcept NotFoundError as e:\n    print(f\"Effect not found: {e}\")\nexcept APIError as e:\n    print(f\"API error occurred: {e}\")\n</code></pre>"},{"location":"usage/library/#advanced-usage","title":"Advanced Usage","text":""},{"location":"usage/library/#refreshing-effects-cache","title":"Refreshing Effects Cache","text":"<p>The client caches the list of effects for performance. If you need to refresh this cache:</p> <pre><code>client.refresh_effects()\n</code></pre>"},{"location":"usage/library/#working-with-effect-parameters","title":"Working with Effect Parameters","text":"<p>Some effects have parameters that can be adjusted. You can access these parameters like this:</p> <pre><code>effect = client.get_effect_by_name(\"Falling Stars\")\nparameters = effect.attributes.parameters\nprint(f\"Effect Parameters: {parameters}\")\n</code></pre> <p>Note that the structure of parameters can vary between effects. Always check the specific effect's documentation or inspect the parameters dictionary to understand what options are available.</p> <p>Remember to handle exceptions and implement proper error checking in your production code to ensure robustness and good user experience.</p>"},{"location":"usage/library/#complete-example","title":"Complete Example","text":"<p>Here's a more comprehensive example that demonstrates various features of the signalrgb-python library:</p> <pre><code>from signalrgb import SignalRGBClient, ConnectionError, APIError, NotFoundError\n\ndef main():\n    try:\n        # Initialize the client\n        client = SignalRGBClient(host=\"localhost\", port=16038)\n\n        # List all effects\n        print(\"Available effects:\")\n        effects = client.get_effects()\n        for effect in effects:\n            print(f\"- {effect.attributes.name}\")\n\n        # Get details of a specific effect\n        effect_name = \"Rainbow Wave\"\n        effect = client.get_effect_by_name(effect_name)\n        print(f\"\\nDetails of '{effect_name}':\")\n        print(f\"Description: {effect.attributes.description}\")\n        print(f\"Uses Audio: {effect.attributes.uses_audio}\")\n\n        # Apply the effect\n        client.apply_effect_by_name(effect_name)\n        print(f\"\\nApplied effect: {effect_name}\")\n\n        # Get current effect\n        current_effect = client.get_current_effect()\n        print(f\"Current effect: {current_effect.attributes.name}\")\n\n        # List and apply presets\n        presets = client.get_effect_presets(current_effect.id)\n        print(\"\\nAvailable presets:\")\n        for preset in presets:\n            print(f\"- {preset.id}\")\n        if presets:\n            client.apply_effect_preset(current_effect.id, presets[0].id)\n            print(f\"Applied preset: {presets[0].id}\")\n\n        # List and set layouts\n        layouts = client.get_layouts()\n        print(\"\\nAvailable layouts:\")\n        for layout in layouts:\n            print(f\"- {layout.id}\")\n        if layouts:\n            client.current_layout = layouts[0].id\n            print(f\"Set current layout to: {layouts[0].id}\")\n\n        # Control brightness\n        client.brightness = 75\n        print(f\"\\nBrightness set to: {client.brightness}\")\n\n        # Enable/disable the canvas\n        client.enabled = True\n        print(f\"Canvas enabled: {client.enabled}\")\n\n        client.enabled = False\n        print(f\"Canvas disabled: {client.enabled}\")\n\n        # Refresh effects cache\n        client.refresh_effects()\n        print(\"\\nEffects cache refreshed\")\n\n    except ConnectionError as e:\n        print(f\"Connection error: {e}\")\n    except NotFoundError as e:\n        print(f\"Resource not found: {e}\")\n    except APIError as e:\n        print(f\"API error: {e}\")\n    except Exception as e:\n        print(f\"An unexpected error occurred: {e}\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>This example demonstrates how to use various features of the signalrgb-python library, including error handling, effect management, preset application, layout switching, brightness control, and enabling/disabling the canvas.</p>"},{"location":"usage/library/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Error Handling: Always wrap your code in try-except blocks to handle potential errors gracefully.</p> </li> <li> <p>Resource Management: If you're using the client in a long-running application, consider implementing a way to close the session when it's no longer needed.</p> </li> <li> <p>Caching: The <code>get_effects()</code> method uses caching to improve performance. If you need the most up-to-date list of effects, use the <code>refresh_effects()</code> method before calling <code>get_effects()</code>.</p> </li> <li> <p>Rate Limiting: Be mindful of how frequently you're making requests, especially in loops or automated scripts. Implement appropriate delays if necessary to avoid overwhelming the SignalRGB API.</p> </li> <li> <p>Logging: Consider implementing logging in your application to track API interactions and any errors that occur.</p> </li> </ol> <p>By following these guidelines and exploring the various features of the signalrgb-python library, you can create robust and efficient applications that interact with SignalRGB Pro.</p>"}]}